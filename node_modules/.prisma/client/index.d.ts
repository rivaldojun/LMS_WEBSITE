
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Registration
 * 
 */
export type Registration = $Result.DefaultSelection<Prisma.$RegistrationPayload>
/**
 * Model Newsletter
 * 
 */
export type Newsletter = $Result.DefaultSelection<Prisma.$NewsletterPayload>
/**
 * Model Blog
 * 
 */
export type Blog = $Result.DefaultSelection<Prisma.$BlogPayload>
/**
 * Model Projet
 * 
 */
export type Projet = $Result.DefaultSelection<Prisma.$ProjetPayload>
/**
 * Model Offre
 * 
 */
export type Offre = $Result.DefaultSelection<Prisma.$OffrePayload>
/**
 * Model Conference
 * 
 */
export type Conference = $Result.DefaultSelection<Prisma.$ConferencePayload>
/**
 * Model ThemeFormation
 * 
 */
export type ThemeFormation = $Result.DefaultSelection<Prisma.$ThemeFormationPayload>
/**
 * Model ContentFormation
 * 
 */
export type ContentFormation = $Result.DefaultSelection<Prisma.$ContentFormationPayload>
/**
 * Model CommentaireFormation
 * 
 */
export type CommentaireFormation = $Result.DefaultSelection<Prisma.$CommentaireFormationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Registrations
 * const registrations = await prisma.registration.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Registrations
   * const registrations = await prisma.registration.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.registration`: Exposes CRUD operations for the **Registration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registrations
    * const registrations = await prisma.registration.findMany()
    * ```
    */
  get registration(): Prisma.RegistrationDelegate<ExtArgs>;

  /**
   * `prisma.newsletter`: Exposes CRUD operations for the **Newsletter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newsletters
    * const newsletters = await prisma.newsletter.findMany()
    * ```
    */
  get newsletter(): Prisma.NewsletterDelegate<ExtArgs>;

  /**
   * `prisma.blog`: Exposes CRUD operations for the **Blog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blogs
    * const blogs = await prisma.blog.findMany()
    * ```
    */
  get blog(): Prisma.BlogDelegate<ExtArgs>;

  /**
   * `prisma.projet`: Exposes CRUD operations for the **Projet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projets
    * const projets = await prisma.projet.findMany()
    * ```
    */
  get projet(): Prisma.ProjetDelegate<ExtArgs>;

  /**
   * `prisma.offre`: Exposes CRUD operations for the **Offre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offres
    * const offres = await prisma.offre.findMany()
    * ```
    */
  get offre(): Prisma.OffreDelegate<ExtArgs>;

  /**
   * `prisma.conference`: Exposes CRUD operations for the **Conference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conferences
    * const conferences = await prisma.conference.findMany()
    * ```
    */
  get conference(): Prisma.ConferenceDelegate<ExtArgs>;

  /**
   * `prisma.themeFormation`: Exposes CRUD operations for the **ThemeFormation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemeFormations
    * const themeFormations = await prisma.themeFormation.findMany()
    * ```
    */
  get themeFormation(): Prisma.ThemeFormationDelegate<ExtArgs>;

  /**
   * `prisma.contentFormation`: Exposes CRUD operations for the **ContentFormation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentFormations
    * const contentFormations = await prisma.contentFormation.findMany()
    * ```
    */
  get contentFormation(): Prisma.ContentFormationDelegate<ExtArgs>;

  /**
   * `prisma.commentaireFormation`: Exposes CRUD operations for the **CommentaireFormation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentaireFormations
    * const commentaireFormations = await prisma.commentaireFormation.findMany()
    * ```
    */
  get commentaireFormation(): Prisma.CommentaireFormationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Registration: 'Registration',
    Newsletter: 'Newsletter',
    Blog: 'Blog',
    Projet: 'Projet',
    Offre: 'Offre',
    Conference: 'Conference',
    ThemeFormation: 'ThemeFormation',
    ContentFormation: 'ContentFormation',
    CommentaireFormation: 'CommentaireFormation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'registration' | 'newsletter' | 'blog' | 'projet' | 'offre' | 'conference' | 'themeFormation' | 'contentFormation' | 'commentaireFormation'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Registration: {
        payload: Prisma.$RegistrationPayload<ExtArgs>
        fields: Prisma.RegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistrationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistrationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          findFirst: {
            args: Prisma.RegistrationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistrationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          findMany: {
            args: Prisma.RegistrationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>[]
          }
          create: {
            args: Prisma.RegistrationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          delete: {
            args: Prisma.RegistrationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          update: {
            args: Prisma.RegistrationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          deleteMany: {
            args: Prisma.RegistrationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RegistrationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RegistrationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          aggregate: {
            args: Prisma.RegistrationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRegistration>
          }
          groupBy: {
            args: Prisma.RegistrationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistrationCountArgs<ExtArgs>,
            result: $Utils.Optional<RegistrationCountAggregateOutputType> | number
          }
        }
      }
      Newsletter: {
        payload: Prisma.$NewsletterPayload<ExtArgs>
        fields: Prisma.NewsletterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsletterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsletterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          findFirst: {
            args: Prisma.NewsletterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsletterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          findMany: {
            args: Prisma.NewsletterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>[]
          }
          create: {
            args: Prisma.NewsletterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          delete: {
            args: Prisma.NewsletterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          update: {
            args: Prisma.NewsletterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          deleteMany: {
            args: Prisma.NewsletterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NewsletterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NewsletterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          aggregate: {
            args: Prisma.NewsletterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNewsletter>
          }
          groupBy: {
            args: Prisma.NewsletterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NewsletterGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsletterCountArgs<ExtArgs>,
            result: $Utils.Optional<NewsletterCountAggregateOutputType> | number
          }
        }
      }
      Blog: {
        payload: Prisma.$BlogPayload<ExtArgs>
        fields: Prisma.BlogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findFirst: {
            args: Prisma.BlogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          findMany: {
            args: Prisma.BlogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>[]
          }
          create: {
            args: Prisma.BlogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          delete: {
            args: Prisma.BlogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          update: {
            args: Prisma.BlogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          deleteMany: {
            args: Prisma.BlogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlogPayload>
          }
          aggregate: {
            args: Prisma.BlogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlog>
          }
          groupBy: {
            args: Prisma.BlogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlogGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlogCountArgs<ExtArgs>,
            result: $Utils.Optional<BlogCountAggregateOutputType> | number
          }
        }
      }
      Projet: {
        payload: Prisma.$ProjetPayload<ExtArgs>
        fields: Prisma.ProjetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          findFirst: {
            args: Prisma.ProjetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          findMany: {
            args: Prisma.ProjetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>[]
          }
          create: {
            args: Prisma.ProjetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          delete: {
            args: Prisma.ProjetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          update: {
            args: Prisma.ProjetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          deleteMany: {
            args: Prisma.ProjetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjetPayload>
          }
          aggregate: {
            args: Prisma.ProjetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProjet>
          }
          groupBy: {
            args: Prisma.ProjetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjetGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjetCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjetCountAggregateOutputType> | number
          }
        }
      }
      Offre: {
        payload: Prisma.$OffrePayload<ExtArgs>
        fields: Prisma.OffreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OffreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OffreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>
          }
          findFirst: {
            args: Prisma.OffreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OffreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>
          }
          findMany: {
            args: Prisma.OffreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>[]
          }
          create: {
            args: Prisma.OffreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>
          }
          delete: {
            args: Prisma.OffreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>
          }
          update: {
            args: Prisma.OffreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>
          }
          deleteMany: {
            args: Prisma.OffreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OffreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OffreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OffrePayload>
          }
          aggregate: {
            args: Prisma.OffreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOffre>
          }
          groupBy: {
            args: Prisma.OffreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OffreGroupByOutputType>[]
          }
          count: {
            args: Prisma.OffreCountArgs<ExtArgs>,
            result: $Utils.Optional<OffreCountAggregateOutputType> | number
          }
        }
      }
      Conference: {
        payload: Prisma.$ConferencePayload<ExtArgs>
        fields: Prisma.ConferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConferenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConferenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>
          }
          findFirst: {
            args: Prisma.ConferenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConferenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>
          }
          findMany: {
            args: Prisma.ConferenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>[]
          }
          create: {
            args: Prisma.ConferenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>
          }
          delete: {
            args: Prisma.ConferenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>
          }
          update: {
            args: Prisma.ConferenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>
          }
          deleteMany: {
            args: Prisma.ConferenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConferenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConferenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConferencePayload>
          }
          aggregate: {
            args: Prisma.ConferenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConference>
          }
          groupBy: {
            args: Prisma.ConferenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConferenceCountArgs<ExtArgs>,
            result: $Utils.Optional<ConferenceCountAggregateOutputType> | number
          }
        }
      }
      ThemeFormation: {
        payload: Prisma.$ThemeFormationPayload<ExtArgs>
        fields: Prisma.ThemeFormationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeFormationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeFormationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>
          }
          findFirst: {
            args: Prisma.ThemeFormationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeFormationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>
          }
          findMany: {
            args: Prisma.ThemeFormationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>[]
          }
          create: {
            args: Prisma.ThemeFormationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>
          }
          delete: {
            args: Prisma.ThemeFormationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>
          }
          update: {
            args: Prisma.ThemeFormationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>
          }
          deleteMany: {
            args: Prisma.ThemeFormationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeFormationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThemeFormationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThemeFormationPayload>
          }
          aggregate: {
            args: Prisma.ThemeFormationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThemeFormation>
          }
          groupBy: {
            args: Prisma.ThemeFormationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThemeFormationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeFormationCountArgs<ExtArgs>,
            result: $Utils.Optional<ThemeFormationCountAggregateOutputType> | number
          }
        }
      }
      ContentFormation: {
        payload: Prisma.$ContentFormationPayload<ExtArgs>
        fields: Prisma.ContentFormationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentFormationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentFormationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>
          }
          findFirst: {
            args: Prisma.ContentFormationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentFormationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>
          }
          findMany: {
            args: Prisma.ContentFormationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>[]
          }
          create: {
            args: Prisma.ContentFormationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>
          }
          delete: {
            args: Prisma.ContentFormationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>
          }
          update: {
            args: Prisma.ContentFormationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>
          }
          deleteMany: {
            args: Prisma.ContentFormationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContentFormationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContentFormationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentFormationPayload>
          }
          aggregate: {
            args: Prisma.ContentFormationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContentFormation>
          }
          groupBy: {
            args: Prisma.ContentFormationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContentFormationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentFormationCountArgs<ExtArgs>,
            result: $Utils.Optional<ContentFormationCountAggregateOutputType> | number
          }
        }
      }
      CommentaireFormation: {
        payload: Prisma.$CommentaireFormationPayload<ExtArgs>
        fields: Prisma.CommentaireFormationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentaireFormationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentaireFormationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>
          }
          findFirst: {
            args: Prisma.CommentaireFormationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentaireFormationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>
          }
          findMany: {
            args: Prisma.CommentaireFormationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>[]
          }
          create: {
            args: Prisma.CommentaireFormationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>
          }
          delete: {
            args: Prisma.CommentaireFormationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>
          }
          update: {
            args: Prisma.CommentaireFormationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>
          }
          deleteMany: {
            args: Prisma.CommentaireFormationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentaireFormationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentaireFormationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentaireFormationPayload>
          }
          aggregate: {
            args: Prisma.CommentaireFormationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommentaireFormation>
          }
          groupBy: {
            args: Prisma.CommentaireFormationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentaireFormationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentaireFormationCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentaireFormationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ThemeFormationCountOutputType
   */

  export type ThemeFormationCountOutputType = {
    contentFormations: number
  }

  export type ThemeFormationCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contentFormations?: boolean | ThemeFormationCountOutputTypeCountContentFormationsArgs
  }

  // Custom InputTypes

  /**
   * ThemeFormationCountOutputType without action
   */
  export type ThemeFormationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormationCountOutputType
     */
    select?: ThemeFormationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ThemeFormationCountOutputType without action
   */
  export type ThemeFormationCountOutputTypeCountContentFormationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContentFormationWhereInput
  }



  /**
   * Count Type ContentFormationCountOutputType
   */

  export type ContentFormationCountOutputType = {
    commentaires: number
  }

  export type ContentFormationCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    commentaires?: boolean | ContentFormationCountOutputTypeCountCommentairesArgs
  }

  // Custom InputTypes

  /**
   * ContentFormationCountOutputType without action
   */
  export type ContentFormationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormationCountOutputType
     */
    select?: ContentFormationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ContentFormationCountOutputType without action
   */
  export type ContentFormationCountOutputTypeCountCommentairesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentaireFormationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Registration
   */

  export type AggregateRegistration = {
    _count: RegistrationCountAggregateOutputType | null
    _avg: RegistrationAvgAggregateOutputType | null
    _sum: RegistrationSumAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  export type RegistrationAvgAggregateOutputType = {
    id: number | null
  }

  export type RegistrationSumAggregateOutputType = {
    id: number | null
  }

  export type RegistrationMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    func: string | null
    password: string | null
  }

  export type RegistrationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    func: string | null
    password: string | null
  }

  export type RegistrationCountAggregateOutputType = {
    id: number
    name: number
    email: number
    func: number
    password: number
    _all: number
  }


  export type RegistrationAvgAggregateInputType = {
    id?: true
  }

  export type RegistrationSumAggregateInputType = {
    id?: true
  }

  export type RegistrationMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    func?: true
    password?: true
  }

  export type RegistrationMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    func?: true
    password?: true
  }

  export type RegistrationCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    func?: true
    password?: true
    _all?: true
  }

  export type RegistrationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registration to aggregate.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Registrations
    **/
    _count?: true | RegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationMaxAggregateInputType
  }

  export type GetRegistrationAggregateType<T extends RegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistration[P]>
      : GetScalarType<T[P], AggregateRegistration[P]>
  }




  export type RegistrationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithAggregationInput | RegistrationOrderByWithAggregationInput[]
    by: RegistrationScalarFieldEnum[] | RegistrationScalarFieldEnum
    having?: RegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationCountAggregateInputType | true
    _avg?: RegistrationAvgAggregateInputType
    _sum?: RegistrationSumAggregateInputType
    _min?: RegistrationMinAggregateInputType
    _max?: RegistrationMaxAggregateInputType
  }

  export type RegistrationGroupByOutputType = {
    id: number
    name: string
    email: string
    func: string
    password: string
    _count: RegistrationCountAggregateOutputType | null
    _avg: RegistrationAvgAggregateOutputType | null
    _sum: RegistrationSumAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  type GetRegistrationGroupByPayload<T extends RegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
        }
      >
    >


  export type RegistrationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    func?: boolean
    password?: boolean
  }, ExtArgs["result"]["registration"]>

  export type RegistrationSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    func?: boolean
    password?: boolean
  }


  export type $RegistrationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Registration"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      email: string
      func: string
      password: string
    }, ExtArgs["result"]["registration"]>
    composites: {}
  }


  type RegistrationGetPayload<S extends boolean | null | undefined | RegistrationDefaultArgs> = $Result.GetResult<Prisma.$RegistrationPayload, S>

  type RegistrationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RegistrationFindManyArgs, 'select' | 'include'> & {
      select?: RegistrationCountAggregateInputType | true
    }

  export interface RegistrationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Registration'], meta: { name: 'Registration' } }
    /**
     * Find zero or one Registration that matches the filter.
     * @param {RegistrationFindUniqueArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RegistrationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RegistrationFindUniqueArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Registration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RegistrationFindUniqueOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RegistrationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistrationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Registration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindFirstArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RegistrationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistrationFindFirstArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Registration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindFirstOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RegistrationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistrationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registrations
     * const registrations = await prisma.registration.findMany()
     * 
     * // Get first 10 Registrations
     * const registrations = await prisma.registration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationWithIdOnly = await prisma.registration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RegistrationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistrationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Registration.
     * @param {RegistrationCreateArgs} args - Arguments to create a Registration.
     * @example
     * // Create one Registration
     * const Registration = await prisma.registration.create({
     *   data: {
     *     // ... data to create a Registration
     *   }
     * })
     * 
    **/
    create<T extends RegistrationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RegistrationCreateArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Registration.
     * @param {RegistrationDeleteArgs} args - Arguments to delete one Registration.
     * @example
     * // Delete one Registration
     * const Registration = await prisma.registration.delete({
     *   where: {
     *     // ... filter to delete one Registration
     *   }
     * })
     * 
    **/
    delete<T extends RegistrationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RegistrationDeleteArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Registration.
     * @param {RegistrationUpdateArgs} args - Arguments to update one Registration.
     * @example
     * // Update one Registration
     * const registration = await prisma.registration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RegistrationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RegistrationUpdateArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Registrations.
     * @param {RegistrationDeleteManyArgs} args - Arguments to filter Registrations to delete.
     * @example
     * // Delete a few Registrations
     * const { count } = await prisma.registration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RegistrationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegistrationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registrations
     * const registration = await prisma.registration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RegistrationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RegistrationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Registration.
     * @param {RegistrationUpsertArgs} args - Arguments to update or create a Registration.
     * @example
     * // Update or create a Registration
     * const registration = await prisma.registration.upsert({
     *   create: {
     *     // ... data to create a Registration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registration we want to update
     *   }
     * })
    **/
    upsert<T extends RegistrationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RegistrationUpsertArgs<ExtArgs>>
    ): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationCountArgs} args - Arguments to filter Registrations to count.
     * @example
     * // Count the number of Registrations
     * const count = await prisma.registration.count({
     *   where: {
     *     // ... the filter for the Registrations we want to count
     *   }
     * })
    **/
    count<T extends RegistrationCountArgs>(
      args?: Subset<T, RegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationAggregateArgs>(args: Subset<T, RegistrationAggregateArgs>): Prisma.PrismaPromise<GetRegistrationAggregateType<T>>

    /**
     * Group by Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistrationGroupByArgs['orderBy'] }
        : { orderBy?: RegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Registration model
   */
  readonly fields: RegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Registration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistrationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Registration model
   */ 
  interface RegistrationFieldRefs {
    readonly id: FieldRef<"Registration", 'Int'>
    readonly name: FieldRef<"Registration", 'String'>
    readonly email: FieldRef<"Registration", 'String'>
    readonly func: FieldRef<"Registration", 'String'>
    readonly password: FieldRef<"Registration", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Registration findUnique
   */
  export type RegistrationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where: RegistrationWhereUniqueInput
  }


  /**
   * Registration findUniqueOrThrow
   */
  export type RegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where: RegistrationWhereUniqueInput
  }


  /**
   * Registration findFirst
   */
  export type RegistrationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }


  /**
   * Registration findFirstOrThrow
   */
  export type RegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }


  /**
   * Registration findMany
   */
  export type RegistrationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Filter, which Registrations to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }


  /**
   * Registration create
   */
  export type RegistrationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * The data needed to create a Registration.
     */
    data: XOR<RegistrationCreateInput, RegistrationUncheckedCreateInput>
  }


  /**
   * Registration update
   */
  export type RegistrationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * The data needed to update a Registration.
     */
    data: XOR<RegistrationUpdateInput, RegistrationUncheckedUpdateInput>
    /**
     * Choose, which Registration to update.
     */
    where: RegistrationWhereUniqueInput
  }


  /**
   * Registration updateMany
   */
  export type RegistrationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Registrations.
     */
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyInput>
    /**
     * Filter which Registrations to update
     */
    where?: RegistrationWhereInput
  }


  /**
   * Registration upsert
   */
  export type RegistrationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * The filter to search for the Registration to update in case it exists.
     */
    where: RegistrationWhereUniqueInput
    /**
     * In case the Registration found by the `where` argument doesn't exist, create a new Registration with this data.
     */
    create: XOR<RegistrationCreateInput, RegistrationUncheckedCreateInput>
    /**
     * In case the Registration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistrationUpdateInput, RegistrationUncheckedUpdateInput>
  }


  /**
   * Registration delete
   */
  export type RegistrationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Filter which Registration to delete.
     */
    where: RegistrationWhereUniqueInput
  }


  /**
   * Registration deleteMany
   */
  export type RegistrationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registrations to delete
     */
    where?: RegistrationWhereInput
  }


  /**
   * Registration without action
   */
  export type RegistrationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
  }



  /**
   * Model Newsletter
   */

  export type AggregateNewsletter = {
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  export type NewsletterAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsletterSumAggregateOutputType = {
    id: number | null
  }

  export type NewsletterMinAggregateOutputType = {
    id: number | null
    email: string | null
  }

  export type NewsletterMaxAggregateOutputType = {
    id: number | null
    email: string | null
  }

  export type NewsletterCountAggregateOutputType = {
    id: number
    email: number
    _all: number
  }


  export type NewsletterAvgAggregateInputType = {
    id?: true
  }

  export type NewsletterSumAggregateInputType = {
    id?: true
  }

  export type NewsletterMinAggregateInputType = {
    id?: true
    email?: true
  }

  export type NewsletterMaxAggregateInputType = {
    id?: true
    email?: true
  }

  export type NewsletterCountAggregateInputType = {
    id?: true
    email?: true
    _all?: true
  }

  export type NewsletterAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Newsletter to aggregate.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Newsletters
    **/
    _count?: true | NewsletterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsletterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsletterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsletterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsletterMaxAggregateInputType
  }

  export type GetNewsletterAggregateType<T extends NewsletterAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsletter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsletter[P]>
      : GetScalarType<T[P], AggregateNewsletter[P]>
  }




  export type NewsletterGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NewsletterWhereInput
    orderBy?: NewsletterOrderByWithAggregationInput | NewsletterOrderByWithAggregationInput[]
    by: NewsletterScalarFieldEnum[] | NewsletterScalarFieldEnum
    having?: NewsletterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsletterCountAggregateInputType | true
    _avg?: NewsletterAvgAggregateInputType
    _sum?: NewsletterSumAggregateInputType
    _min?: NewsletterMinAggregateInputType
    _max?: NewsletterMaxAggregateInputType
  }

  export type NewsletterGroupByOutputType = {
    id: number
    email: string
    _count: NewsletterCountAggregateOutputType | null
    _avg: NewsletterAvgAggregateOutputType | null
    _sum: NewsletterSumAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  type GetNewsletterGroupByPayload<T extends NewsletterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsletterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsletterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
            : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
        }
      >
    >


  export type NewsletterSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type NewsletterSelectScalar = {
    id?: boolean
    email?: boolean
  }


  export type $NewsletterPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Newsletter"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      email: string
    }, ExtArgs["result"]["newsletter"]>
    composites: {}
  }


  type NewsletterGetPayload<S extends boolean | null | undefined | NewsletterDefaultArgs> = $Result.GetResult<Prisma.$NewsletterPayload, S>

  type NewsletterCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NewsletterFindManyArgs, 'select' | 'include'> & {
      select?: NewsletterCountAggregateInputType | true
    }

  export interface NewsletterDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Newsletter'], meta: { name: 'Newsletter' } }
    /**
     * Find zero or one Newsletter that matches the filter.
     * @param {NewsletterFindUniqueArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsletterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterFindUniqueArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Newsletter that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NewsletterFindUniqueOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewsletterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Newsletter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsletterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindFirstArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Newsletter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewsletterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Newsletters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newsletters
     * const newsletters = await prisma.newsletter.findMany()
     * 
     * // Get first 10 Newsletters
     * const newsletters = await prisma.newsletter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsletterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Newsletter.
     * @param {NewsletterCreateArgs} args - Arguments to create a Newsletter.
     * @example
     * // Create one Newsletter
     * const Newsletter = await prisma.newsletter.create({
     *   data: {
     *     // ... data to create a Newsletter
     *   }
     * })
     * 
    **/
    create<T extends NewsletterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterCreateArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Newsletter.
     * @param {NewsletterDeleteArgs} args - Arguments to delete one Newsletter.
     * @example
     * // Delete one Newsletter
     * const Newsletter = await prisma.newsletter.delete({
     *   where: {
     *     // ... filter to delete one Newsletter
     *   }
     * })
     * 
    **/
    delete<T extends NewsletterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterDeleteArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Newsletter.
     * @param {NewsletterUpdateArgs} args - Arguments to update one Newsletter.
     * @example
     * // Update one Newsletter
     * const newsletter = await prisma.newsletter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsletterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterUpdateArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Newsletters.
     * @param {NewsletterDeleteManyArgs} args - Arguments to filter Newsletters to delete.
     * @example
     * // Delete a few Newsletters
     * const { count } = await prisma.newsletter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsletterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewsletterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newsletters
     * const newsletter = await prisma.newsletter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsletterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Newsletter.
     * @param {NewsletterUpsertArgs} args - Arguments to update or create a Newsletter.
     * @example
     * // Update or create a Newsletter
     * const newsletter = await prisma.newsletter.upsert({
     *   create: {
     *     // ... data to create a Newsletter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newsletter we want to update
     *   }
     * })
    **/
    upsert<T extends NewsletterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NewsletterUpsertArgs<ExtArgs>>
    ): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterCountArgs} args - Arguments to filter Newsletters to count.
     * @example
     * // Count the number of Newsletters
     * const count = await prisma.newsletter.count({
     *   where: {
     *     // ... the filter for the Newsletters we want to count
     *   }
     * })
    **/
    count<T extends NewsletterCountArgs>(
      args?: Subset<T, NewsletterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsletterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsletterAggregateArgs>(args: Subset<T, NewsletterAggregateArgs>): Prisma.PrismaPromise<GetNewsletterAggregateType<T>>

    /**
     * Group by Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsletterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsletterGroupByArgs['orderBy'] }
        : { orderBy?: NewsletterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsletterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsletterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Newsletter model
   */
  readonly fields: NewsletterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Newsletter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsletterClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Newsletter model
   */ 
  interface NewsletterFieldRefs {
    readonly id: FieldRef<"Newsletter", 'Int'>
    readonly email: FieldRef<"Newsletter", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Newsletter findUnique
   */
  export type NewsletterFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter findUniqueOrThrow
   */
  export type NewsletterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter findFirst
   */
  export type NewsletterFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }


  /**
   * Newsletter findFirstOrThrow
   */
  export type NewsletterFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }


  /**
   * Newsletter findMany
   */
  export type NewsletterFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter, which Newsletters to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }


  /**
   * Newsletter create
   */
  export type NewsletterCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * The data needed to create a Newsletter.
     */
    data: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
  }


  /**
   * Newsletter update
   */
  export type NewsletterUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * The data needed to update a Newsletter.
     */
    data: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
    /**
     * Choose, which Newsletter to update.
     */
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter updateMany
   */
  export type NewsletterUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Newsletters.
     */
    data: XOR<NewsletterUpdateManyMutationInput, NewsletterUncheckedUpdateManyInput>
    /**
     * Filter which Newsletters to update
     */
    where?: NewsletterWhereInput
  }


  /**
   * Newsletter upsert
   */
  export type NewsletterUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * The filter to search for the Newsletter to update in case it exists.
     */
    where: NewsletterWhereUniqueInput
    /**
     * In case the Newsletter found by the `where` argument doesn't exist, create a new Newsletter with this data.
     */
    create: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
    /**
     * In case the Newsletter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
  }


  /**
   * Newsletter delete
   */
  export type NewsletterDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Filter which Newsletter to delete.
     */
    where: NewsletterWhereUniqueInput
  }


  /**
   * Newsletter deleteMany
   */
  export type NewsletterDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Newsletters to delete
     */
    where?: NewsletterWhereInput
  }


  /**
   * Newsletter without action
   */
  export type NewsletterDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
  }



  /**
   * Model Blog
   */

  export type AggregateBlog = {
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  export type BlogAvgAggregateOutputType = {
    id: number | null
  }

  export type BlogSumAggregateOutputType = {
    id: number | null
  }

  export type BlogMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    imagePath: string | null
  }

  export type BlogMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    imagePath: string | null
  }

  export type BlogCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    imagePath: number
    _all: number
  }


  export type BlogAvgAggregateInputType = {
    id?: true
  }

  export type BlogSumAggregateInputType = {
    id?: true
  }

  export type BlogMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
  }

  export type BlogMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
  }

  export type BlogCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
    _all?: true
  }

  export type BlogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blog to aggregate.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blogs
    **/
    _count?: true | BlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlogMaxAggregateInputType
  }

  export type GetBlogAggregateType<T extends BlogAggregateArgs> = {
        [P in keyof T & keyof AggregateBlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlog[P]>
      : GetScalarType<T[P], AggregateBlog[P]>
  }




  export type BlogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BlogWhereInput
    orderBy?: BlogOrderByWithAggregationInput | BlogOrderByWithAggregationInput[]
    by: BlogScalarFieldEnum[] | BlogScalarFieldEnum
    having?: BlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlogCountAggregateInputType | true
    _avg?: BlogAvgAggregateInputType
    _sum?: BlogSumAggregateInputType
    _min?: BlogMinAggregateInputType
    _max?: BlogMaxAggregateInputType
  }

  export type BlogGroupByOutputType = {
    id: number
    titre: string
    description: string
    imagePath: string
    _count: BlogCountAggregateOutputType | null
    _avg: BlogAvgAggregateOutputType | null
    _sum: BlogSumAggregateOutputType | null
    _min: BlogMinAggregateOutputType | null
    _max: BlogMaxAggregateOutputType | null
  }

  type GetBlogGroupByPayload<T extends BlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlogGroupByOutputType[P]>
            : GetScalarType<T[P], BlogGroupByOutputType[P]>
        }
      >
    >


  export type BlogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    imagePath?: boolean
  }, ExtArgs["result"]["blog"]>

  export type BlogSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    imagePath?: boolean
  }


  export type $BlogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Blog"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      titre: string
      description: string
      imagePath: string
    }, ExtArgs["result"]["blog"]>
    composites: {}
  }


  type BlogGetPayload<S extends boolean | null | undefined | BlogDefaultArgs> = $Result.GetResult<Prisma.$BlogPayload, S>

  type BlogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BlogFindManyArgs, 'select' | 'include'> & {
      select?: BlogCountAggregateInputType | true
    }

  export interface BlogDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Blog'], meta: { name: 'Blog' } }
    /**
     * Find zero or one Blog that matches the filter.
     * @param {BlogFindUniqueArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlogFindUniqueArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Blog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlogFindUniqueOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Blog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindFirstArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Blog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindFirstOrThrowArgs} args - Arguments to find a Blog
     * @example
     * // Get one Blog
     * const blog = await prisma.blog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Blogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blogs
     * const blogs = await prisma.blog.findMany()
     * 
     * // Get first 10 Blogs
     * const blogs = await prisma.blog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blogWithIdOnly = await prisma.blog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Blog.
     * @param {BlogCreateArgs} args - Arguments to create a Blog.
     * @example
     * // Create one Blog
     * const Blog = await prisma.blog.create({
     *   data: {
     *     // ... data to create a Blog
     *   }
     * })
     * 
    **/
    create<T extends BlogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogCreateArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Blog.
     * @param {BlogDeleteArgs} args - Arguments to delete one Blog.
     * @example
     * // Delete one Blog
     * const Blog = await prisma.blog.delete({
     *   where: {
     *     // ... filter to delete one Blog
     *   }
     * })
     * 
    **/
    delete<T extends BlogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlogDeleteArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Blog.
     * @param {BlogUpdateArgs} args - Arguments to update one Blog.
     * @example
     * // Update one Blog
     * const blog = await prisma.blog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpdateArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Blogs.
     * @param {BlogDeleteManyArgs} args - Arguments to filter Blogs to delete.
     * @example
     * // Delete a few Blogs
     * const { count } = await prisma.blog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blogs
     * const blog = await prisma.blog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blog.
     * @param {BlogUpsertArgs} args - Arguments to update or create a Blog.
     * @example
     * // Update or create a Blog
     * const blog = await prisma.blog.upsert({
     *   create: {
     *     // ... data to create a Blog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blog we want to update
     *   }
     * })
    **/
    upsert<T extends BlogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlogUpsertArgs<ExtArgs>>
    ): Prisma__BlogClient<$Result.GetResult<Prisma.$BlogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Blogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogCountArgs} args - Arguments to filter Blogs to count.
     * @example
     * // Count the number of Blogs
     * const count = await prisma.blog.count({
     *   where: {
     *     // ... the filter for the Blogs we want to count
     *   }
     * })
    **/
    count<T extends BlogCountArgs>(
      args?: Subset<T, BlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlogAggregateArgs>(args: Subset<T, BlogAggregateArgs>): Prisma.PrismaPromise<GetBlogAggregateType<T>>

    /**
     * Group by Blog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlogGroupByArgs['orderBy'] }
        : { orderBy?: BlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Blog model
   */
  readonly fields: BlogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Blog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Blog model
   */ 
  interface BlogFieldRefs {
    readonly id: FieldRef<"Blog", 'Int'>
    readonly titre: FieldRef<"Blog", 'String'>
    readonly description: FieldRef<"Blog", 'String'>
    readonly imagePath: FieldRef<"Blog", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Blog findUnique
   */
  export type BlogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog findUniqueOrThrow
   */
  export type BlogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog findFirst
   */
  export type BlogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog findFirstOrThrow
   */
  export type BlogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blog to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blogs.
     */
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog findMany
   */
  export type BlogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter, which Blogs to fetch.
     */
    where?: BlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blogs to fetch.
     */
    orderBy?: BlogOrderByWithRelationInput | BlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blogs.
     */
    cursor?: BlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blogs.
     */
    skip?: number
    distinct?: BlogScalarFieldEnum | BlogScalarFieldEnum[]
  }


  /**
   * Blog create
   */
  export type BlogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * The data needed to create a Blog.
     */
    data: XOR<BlogCreateInput, BlogUncheckedCreateInput>
  }


  /**
   * Blog update
   */
  export type BlogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * The data needed to update a Blog.
     */
    data: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
    /**
     * Choose, which Blog to update.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog updateMany
   */
  export type BlogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Blogs.
     */
    data: XOR<BlogUpdateManyMutationInput, BlogUncheckedUpdateManyInput>
    /**
     * Filter which Blogs to update
     */
    where?: BlogWhereInput
  }


  /**
   * Blog upsert
   */
  export type BlogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * The filter to search for the Blog to update in case it exists.
     */
    where: BlogWhereUniqueInput
    /**
     * In case the Blog found by the `where` argument doesn't exist, create a new Blog with this data.
     */
    create: XOR<BlogCreateInput, BlogUncheckedCreateInput>
    /**
     * In case the Blog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlogUpdateInput, BlogUncheckedUpdateInput>
  }


  /**
   * Blog delete
   */
  export type BlogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
    /**
     * Filter which Blog to delete.
     */
    where: BlogWhereUniqueInput
  }


  /**
   * Blog deleteMany
   */
  export type BlogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blogs to delete
     */
    where?: BlogWhereInput
  }


  /**
   * Blog without action
   */
  export type BlogDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blog
     */
    select?: BlogSelect<ExtArgs> | null
  }



  /**
   * Model Projet
   */

  export type AggregateProjet = {
    _count: ProjetCountAggregateOutputType | null
    _avg: ProjetAvgAggregateOutputType | null
    _sum: ProjetSumAggregateOutputType | null
    _min: ProjetMinAggregateOutputType | null
    _max: ProjetMaxAggregateOutputType | null
  }

  export type ProjetAvgAggregateOutputType = {
    id: number | null
  }

  export type ProjetSumAggregateOutputType = {
    id: number | null
  }

  export type ProjetMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    imagePath: string | null
  }

  export type ProjetMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    imagePath: string | null
  }

  export type ProjetCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    imagePath: number
    _all: number
  }


  export type ProjetAvgAggregateInputType = {
    id?: true
  }

  export type ProjetSumAggregateInputType = {
    id?: true
  }

  export type ProjetMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
  }

  export type ProjetMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
  }

  export type ProjetCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
    _all?: true
  }

  export type ProjetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projet to aggregate.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projets
    **/
    _count?: true | ProjetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjetMaxAggregateInputType
  }

  export type GetProjetAggregateType<T extends ProjetAggregateArgs> = {
        [P in keyof T & keyof AggregateProjet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjet[P]>
      : GetScalarType<T[P], AggregateProjet[P]>
  }




  export type ProjetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjetWhereInput
    orderBy?: ProjetOrderByWithAggregationInput | ProjetOrderByWithAggregationInput[]
    by: ProjetScalarFieldEnum[] | ProjetScalarFieldEnum
    having?: ProjetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjetCountAggregateInputType | true
    _avg?: ProjetAvgAggregateInputType
    _sum?: ProjetSumAggregateInputType
    _min?: ProjetMinAggregateInputType
    _max?: ProjetMaxAggregateInputType
  }

  export type ProjetGroupByOutputType = {
    id: number
    titre: string
    description: string
    imagePath: string
    _count: ProjetCountAggregateOutputType | null
    _avg: ProjetAvgAggregateOutputType | null
    _sum: ProjetSumAggregateOutputType | null
    _min: ProjetMinAggregateOutputType | null
    _max: ProjetMaxAggregateOutputType | null
  }

  type GetProjetGroupByPayload<T extends ProjetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjetGroupByOutputType[P]>
            : GetScalarType<T[P], ProjetGroupByOutputType[P]>
        }
      >
    >


  export type ProjetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    imagePath?: boolean
  }, ExtArgs["result"]["projet"]>

  export type ProjetSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    imagePath?: boolean
  }


  export type $ProjetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Projet"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      titre: string
      description: string
      imagePath: string
    }, ExtArgs["result"]["projet"]>
    composites: {}
  }


  type ProjetGetPayload<S extends boolean | null | undefined | ProjetDefaultArgs> = $Result.GetResult<Prisma.$ProjetPayload, S>

  type ProjetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProjetFindManyArgs, 'select' | 'include'> & {
      select?: ProjetCountAggregateInputType | true
    }

  export interface ProjetDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Projet'], meta: { name: 'Projet' } }
    /**
     * Find zero or one Projet that matches the filter.
     * @param {ProjetFindUniqueArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetFindUniqueArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Projet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjetFindUniqueOrThrowArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Projet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetFindFirstArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindFirstArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Projet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetFindFirstOrThrowArgs} args - Arguments to find a Projet
     * @example
     * // Get one Projet
     * const projet = await prisma.projet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projets
     * const projets = await prisma.projet.findMany()
     * 
     * // Get first 10 Projets
     * const projets = await prisma.projet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projetWithIdOnly = await prisma.projet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Projet.
     * @param {ProjetCreateArgs} args - Arguments to create a Projet.
     * @example
     * // Create one Projet
     * const Projet = await prisma.projet.create({
     *   data: {
     *     // ... data to create a Projet
     *   }
     * })
     * 
    **/
    create<T extends ProjetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetCreateArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Projet.
     * @param {ProjetDeleteArgs} args - Arguments to delete one Projet.
     * @example
     * // Delete one Projet
     * const Projet = await prisma.projet.delete({
     *   where: {
     *     // ... filter to delete one Projet
     *   }
     * })
     * 
    **/
    delete<T extends ProjetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetDeleteArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Projet.
     * @param {ProjetUpdateArgs} args - Arguments to update one Projet.
     * @example
     * // Update one Projet
     * const projet = await prisma.projet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetUpdateArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projets.
     * @param {ProjetDeleteManyArgs} args - Arguments to filter Projets to delete.
     * @example
     * // Delete a few Projets
     * const { count } = await prisma.projet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projets
     * const projet = await prisma.projet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projet.
     * @param {ProjetUpsertArgs} args - Arguments to update or create a Projet.
     * @example
     * // Update or create a Projet
     * const projet = await prisma.projet.upsert({
     *   create: {
     *     // ... data to create a Projet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projet we want to update
     *   }
     * })
    **/
    upsert<T extends ProjetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjetUpsertArgs<ExtArgs>>
    ): Prisma__ProjetClient<$Result.GetResult<Prisma.$ProjetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Projets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetCountArgs} args - Arguments to filter Projets to count.
     * @example
     * // Count the number of Projets
     * const count = await prisma.projet.count({
     *   where: {
     *     // ... the filter for the Projets we want to count
     *   }
     * })
    **/
    count<T extends ProjetCountArgs>(
      args?: Subset<T, ProjetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjetAggregateArgs>(args: Subset<T, ProjetAggregateArgs>): Prisma.PrismaPromise<GetProjetAggregateType<T>>

    /**
     * Group by Projet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjetGroupByArgs['orderBy'] }
        : { orderBy?: ProjetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Projet model
   */
  readonly fields: ProjetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Projet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Projet model
   */ 
  interface ProjetFieldRefs {
    readonly id: FieldRef<"Projet", 'Int'>
    readonly titre: FieldRef<"Projet", 'String'>
    readonly description: FieldRef<"Projet", 'String'>
    readonly imagePath: FieldRef<"Projet", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Projet findUnique
   */
  export type ProjetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet findUniqueOrThrow
   */
  export type ProjetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet findFirst
   */
  export type ProjetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projets.
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projets.
     */
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Projet findFirstOrThrow
   */
  export type ProjetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Filter, which Projet to fetch.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projets.
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projets.
     */
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Projet findMany
   */
  export type ProjetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Filter, which Projets to fetch.
     */
    where?: ProjetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projets to fetch.
     */
    orderBy?: ProjetOrderByWithRelationInput | ProjetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projets.
     */
    cursor?: ProjetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projets.
     */
    skip?: number
    distinct?: ProjetScalarFieldEnum | ProjetScalarFieldEnum[]
  }


  /**
   * Projet create
   */
  export type ProjetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * The data needed to create a Projet.
     */
    data: XOR<ProjetCreateInput, ProjetUncheckedCreateInput>
  }


  /**
   * Projet update
   */
  export type ProjetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * The data needed to update a Projet.
     */
    data: XOR<ProjetUpdateInput, ProjetUncheckedUpdateInput>
    /**
     * Choose, which Projet to update.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet updateMany
   */
  export type ProjetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projets.
     */
    data: XOR<ProjetUpdateManyMutationInput, ProjetUncheckedUpdateManyInput>
    /**
     * Filter which Projets to update
     */
    where?: ProjetWhereInput
  }


  /**
   * Projet upsert
   */
  export type ProjetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * The filter to search for the Projet to update in case it exists.
     */
    where: ProjetWhereUniqueInput
    /**
     * In case the Projet found by the `where` argument doesn't exist, create a new Projet with this data.
     */
    create: XOR<ProjetCreateInput, ProjetUncheckedCreateInput>
    /**
     * In case the Projet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjetUpdateInput, ProjetUncheckedUpdateInput>
  }


  /**
   * Projet delete
   */
  export type ProjetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
    /**
     * Filter which Projet to delete.
     */
    where: ProjetWhereUniqueInput
  }


  /**
   * Projet deleteMany
   */
  export type ProjetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projets to delete
     */
    where?: ProjetWhereInput
  }


  /**
   * Projet without action
   */
  export type ProjetDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projet
     */
    select?: ProjetSelect<ExtArgs> | null
  }



  /**
   * Model Offre
   */

  export type AggregateOffre = {
    _count: OffreCountAggregateOutputType | null
    _avg: OffreAvgAggregateOutputType | null
    _sum: OffreSumAggregateOutputType | null
    _min: OffreMinAggregateOutputType | null
    _max: OffreMaxAggregateOutputType | null
  }

  export type OffreAvgAggregateOutputType = {
    id: number | null
  }

  export type OffreSumAggregateOutputType = {
    id: number | null
  }

  export type OffreMinAggregateOutputType = {
    id: number | null
    type: string | null
    description: string | null
    imagePath: string | null
    fonc: string | null
    date: Date | null
  }

  export type OffreMaxAggregateOutputType = {
    id: number | null
    type: string | null
    description: string | null
    imagePath: string | null
    fonc: string | null
    date: Date | null
  }

  export type OffreCountAggregateOutputType = {
    id: number
    type: number
    description: number
    imagePath: number
    fonc: number
    date: number
    _all: number
  }


  export type OffreAvgAggregateInputType = {
    id?: true
  }

  export type OffreSumAggregateInputType = {
    id?: true
  }

  export type OffreMinAggregateInputType = {
    id?: true
    type?: true
    description?: true
    imagePath?: true
    fonc?: true
    date?: true
  }

  export type OffreMaxAggregateInputType = {
    id?: true
    type?: true
    description?: true
    imagePath?: true
    fonc?: true
    date?: true
  }

  export type OffreCountAggregateInputType = {
    id?: true
    type?: true
    description?: true
    imagePath?: true
    fonc?: true
    date?: true
    _all?: true
  }

  export type OffreAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offre to aggregate.
     */
    where?: OffreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offres to fetch.
     */
    orderBy?: OffreOrderByWithRelationInput | OffreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OffreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Offres
    **/
    _count?: true | OffreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OffreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OffreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OffreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OffreMaxAggregateInputType
  }

  export type GetOffreAggregateType<T extends OffreAggregateArgs> = {
        [P in keyof T & keyof AggregateOffre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffre[P]>
      : GetScalarType<T[P], AggregateOffre[P]>
  }




  export type OffreGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OffreWhereInput
    orderBy?: OffreOrderByWithAggregationInput | OffreOrderByWithAggregationInput[]
    by: OffreScalarFieldEnum[] | OffreScalarFieldEnum
    having?: OffreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OffreCountAggregateInputType | true
    _avg?: OffreAvgAggregateInputType
    _sum?: OffreSumAggregateInputType
    _min?: OffreMinAggregateInputType
    _max?: OffreMaxAggregateInputType
  }

  export type OffreGroupByOutputType = {
    id: number
    type: string
    description: string
    imagePath: string
    fonc: string
    date: Date
    _count: OffreCountAggregateOutputType | null
    _avg: OffreAvgAggregateOutputType | null
    _sum: OffreSumAggregateOutputType | null
    _min: OffreMinAggregateOutputType | null
    _max: OffreMaxAggregateOutputType | null
  }

  type GetOffreGroupByPayload<T extends OffreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OffreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OffreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OffreGroupByOutputType[P]>
            : GetScalarType<T[P], OffreGroupByOutputType[P]>
        }
      >
    >


  export type OffreSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    imagePath?: boolean
    fonc?: boolean
    date?: boolean
  }, ExtArgs["result"]["offre"]>

  export type OffreSelectScalar = {
    id?: boolean
    type?: boolean
    description?: boolean
    imagePath?: boolean
    fonc?: boolean
    date?: boolean
  }


  export type $OffrePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Offre"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      type: string
      description: string
      imagePath: string
      fonc: string
      date: Date
    }, ExtArgs["result"]["offre"]>
    composites: {}
  }


  type OffreGetPayload<S extends boolean | null | undefined | OffreDefaultArgs> = $Result.GetResult<Prisma.$OffrePayload, S>

  type OffreCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OffreFindManyArgs, 'select' | 'include'> & {
      select?: OffreCountAggregateInputType | true
    }

  export interface OffreDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Offre'], meta: { name: 'Offre' } }
    /**
     * Find zero or one Offre that matches the filter.
     * @param {OffreFindUniqueArgs} args - Arguments to find a Offre
     * @example
     * // Get one Offre
     * const offre = await prisma.offre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OffreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OffreFindUniqueArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Offre that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OffreFindUniqueOrThrowArgs} args - Arguments to find a Offre
     * @example
     * // Get one Offre
     * const offre = await prisma.offre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OffreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Offre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreFindFirstArgs} args - Arguments to find a Offre
     * @example
     * // Get one Offre
     * const offre = await prisma.offre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OffreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreFindFirstArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Offre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreFindFirstOrThrowArgs} args - Arguments to find a Offre
     * @example
     * // Get one Offre
     * const offre = await prisma.offre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OffreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Offres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offres
     * const offres = await prisma.offre.findMany()
     * 
     * // Get first 10 Offres
     * const offres = await prisma.offre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offreWithIdOnly = await prisma.offre.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OffreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Offre.
     * @param {OffreCreateArgs} args - Arguments to create a Offre.
     * @example
     * // Create one Offre
     * const Offre = await prisma.offre.create({
     *   data: {
     *     // ... data to create a Offre
     *   }
     * })
     * 
    **/
    create<T extends OffreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OffreCreateArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Offre.
     * @param {OffreDeleteArgs} args - Arguments to delete one Offre.
     * @example
     * // Delete one Offre
     * const Offre = await prisma.offre.delete({
     *   where: {
     *     // ... filter to delete one Offre
     *   }
     * })
     * 
    **/
    delete<T extends OffreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OffreDeleteArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Offre.
     * @param {OffreUpdateArgs} args - Arguments to update one Offre.
     * @example
     * // Update one Offre
     * const offre = await prisma.offre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OffreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OffreUpdateArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Offres.
     * @param {OffreDeleteManyArgs} args - Arguments to filter Offres to delete.
     * @example
     * // Delete a few Offres
     * const { count } = await prisma.offre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OffreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OffreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offres
     * const offre = await prisma.offre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OffreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OffreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offre.
     * @param {OffreUpsertArgs} args - Arguments to update or create a Offre.
     * @example
     * // Update or create a Offre
     * const offre = await prisma.offre.upsert({
     *   create: {
     *     // ... data to create a Offre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offre we want to update
     *   }
     * })
    **/
    upsert<T extends OffreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OffreUpsertArgs<ExtArgs>>
    ): Prisma__OffreClient<$Result.GetResult<Prisma.$OffrePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Offres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreCountArgs} args - Arguments to filter Offres to count.
     * @example
     * // Count the number of Offres
     * const count = await prisma.offre.count({
     *   where: {
     *     // ... the filter for the Offres we want to count
     *   }
     * })
    **/
    count<T extends OffreCountArgs>(
      args?: Subset<T, OffreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OffreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OffreAggregateArgs>(args: Subset<T, OffreAggregateArgs>): Prisma.PrismaPromise<GetOffreAggregateType<T>>

    /**
     * Group by Offre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OffreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OffreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OffreGroupByArgs['orderBy'] }
        : { orderBy?: OffreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OffreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOffreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Offre model
   */
  readonly fields: OffreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Offre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OffreClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Offre model
   */ 
  interface OffreFieldRefs {
    readonly id: FieldRef<"Offre", 'Int'>
    readonly type: FieldRef<"Offre", 'String'>
    readonly description: FieldRef<"Offre", 'String'>
    readonly imagePath: FieldRef<"Offre", 'String'>
    readonly fonc: FieldRef<"Offre", 'String'>
    readonly date: FieldRef<"Offre", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Offre findUnique
   */
  export type OffreFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * Filter, which Offre to fetch.
     */
    where: OffreWhereUniqueInput
  }


  /**
   * Offre findUniqueOrThrow
   */
  export type OffreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * Filter, which Offre to fetch.
     */
    where: OffreWhereUniqueInput
  }


  /**
   * Offre findFirst
   */
  export type OffreFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * Filter, which Offre to fetch.
     */
    where?: OffreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offres to fetch.
     */
    orderBy?: OffreOrderByWithRelationInput | OffreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offres.
     */
    cursor?: OffreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offres.
     */
    distinct?: OffreScalarFieldEnum | OffreScalarFieldEnum[]
  }


  /**
   * Offre findFirstOrThrow
   */
  export type OffreFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * Filter, which Offre to fetch.
     */
    where?: OffreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offres to fetch.
     */
    orderBy?: OffreOrderByWithRelationInput | OffreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offres.
     */
    cursor?: OffreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offres.
     */
    distinct?: OffreScalarFieldEnum | OffreScalarFieldEnum[]
  }


  /**
   * Offre findMany
   */
  export type OffreFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * Filter, which Offres to fetch.
     */
    where?: OffreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offres to fetch.
     */
    orderBy?: OffreOrderByWithRelationInput | OffreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Offres.
     */
    cursor?: OffreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offres.
     */
    skip?: number
    distinct?: OffreScalarFieldEnum | OffreScalarFieldEnum[]
  }


  /**
   * Offre create
   */
  export type OffreCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * The data needed to create a Offre.
     */
    data: XOR<OffreCreateInput, OffreUncheckedCreateInput>
  }


  /**
   * Offre update
   */
  export type OffreUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * The data needed to update a Offre.
     */
    data: XOR<OffreUpdateInput, OffreUncheckedUpdateInput>
    /**
     * Choose, which Offre to update.
     */
    where: OffreWhereUniqueInput
  }


  /**
   * Offre updateMany
   */
  export type OffreUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Offres.
     */
    data: XOR<OffreUpdateManyMutationInput, OffreUncheckedUpdateManyInput>
    /**
     * Filter which Offres to update
     */
    where?: OffreWhereInput
  }


  /**
   * Offre upsert
   */
  export type OffreUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * The filter to search for the Offre to update in case it exists.
     */
    where: OffreWhereUniqueInput
    /**
     * In case the Offre found by the `where` argument doesn't exist, create a new Offre with this data.
     */
    create: XOR<OffreCreateInput, OffreUncheckedCreateInput>
    /**
     * In case the Offre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OffreUpdateInput, OffreUncheckedUpdateInput>
  }


  /**
   * Offre delete
   */
  export type OffreDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
    /**
     * Filter which Offre to delete.
     */
    where: OffreWhereUniqueInput
  }


  /**
   * Offre deleteMany
   */
  export type OffreDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offres to delete
     */
    where?: OffreWhereInput
  }


  /**
   * Offre without action
   */
  export type OffreDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offre
     */
    select?: OffreSelect<ExtArgs> | null
  }



  /**
   * Model Conference
   */

  export type AggregateConference = {
    _count: ConferenceCountAggregateOutputType | null
    _avg: ConferenceAvgAggregateOutputType | null
    _sum: ConferenceSumAggregateOutputType | null
    _min: ConferenceMinAggregateOutputType | null
    _max: ConferenceMaxAggregateOutputType | null
  }

  export type ConferenceAvgAggregateOutputType = {
    id: number | null
  }

  export type ConferenceSumAggregateOutputType = {
    id: number | null
  }

  export type ConferenceMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    imagePath: string | null
    lien: string | null
    lieu: string | null
    date: Date | null
  }

  export type ConferenceMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    imagePath: string | null
    lien: string | null
    lieu: string | null
    date: Date | null
  }

  export type ConferenceCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    imagePath: number
    lien: number
    lieu: number
    date: number
    _all: number
  }


  export type ConferenceAvgAggregateInputType = {
    id?: true
  }

  export type ConferenceSumAggregateInputType = {
    id?: true
  }

  export type ConferenceMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
    lien?: true
    lieu?: true
    date?: true
  }

  export type ConferenceMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
    lien?: true
    lieu?: true
    date?: true
  }

  export type ConferenceCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    imagePath?: true
    lien?: true
    lieu?: true
    date?: true
    _all?: true
  }

  export type ConferenceAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conference to aggregate.
     */
    where?: ConferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conferences to fetch.
     */
    orderBy?: ConferenceOrderByWithRelationInput | ConferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conferences
    **/
    _count?: true | ConferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConferenceMaxAggregateInputType
  }

  export type GetConferenceAggregateType<T extends ConferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateConference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConference[P]>
      : GetScalarType<T[P], AggregateConference[P]>
  }




  export type ConferenceGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ConferenceWhereInput
    orderBy?: ConferenceOrderByWithAggregationInput | ConferenceOrderByWithAggregationInput[]
    by: ConferenceScalarFieldEnum[] | ConferenceScalarFieldEnum
    having?: ConferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConferenceCountAggregateInputType | true
    _avg?: ConferenceAvgAggregateInputType
    _sum?: ConferenceSumAggregateInputType
    _min?: ConferenceMinAggregateInputType
    _max?: ConferenceMaxAggregateInputType
  }

  export type ConferenceGroupByOutputType = {
    id: number
    titre: string
    description: string
    imagePath: string
    lien: string
    lieu: string
    date: Date
    _count: ConferenceCountAggregateOutputType | null
    _avg: ConferenceAvgAggregateOutputType | null
    _sum: ConferenceSumAggregateOutputType | null
    _min: ConferenceMinAggregateOutputType | null
    _max: ConferenceMaxAggregateOutputType | null
  }

  type GetConferenceGroupByPayload<T extends ConferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ConferenceGroupByOutputType[P]>
        }
      >
    >


  export type ConferenceSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    imagePath?: boolean
    lien?: boolean
    lieu?: boolean
    date?: boolean
  }, ExtArgs["result"]["conference"]>

  export type ConferenceSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    imagePath?: boolean
    lien?: boolean
    lieu?: boolean
    date?: boolean
  }


  export type $ConferencePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Conference"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      titre: string
      description: string
      imagePath: string
      lien: string
      lieu: string
      date: Date
    }, ExtArgs["result"]["conference"]>
    composites: {}
  }


  type ConferenceGetPayload<S extends boolean | null | undefined | ConferenceDefaultArgs> = $Result.GetResult<Prisma.$ConferencePayload, S>

  type ConferenceCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ConferenceFindManyArgs, 'select' | 'include'> & {
      select?: ConferenceCountAggregateInputType | true
    }

  export interface ConferenceDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conference'], meta: { name: 'Conference' } }
    /**
     * Find zero or one Conference that matches the filter.
     * @param {ConferenceFindUniqueArgs} args - Arguments to find a Conference
     * @example
     * // Get one Conference
     * const conference = await prisma.conference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConferenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConferenceFindUniqueArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Conference that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConferenceFindUniqueOrThrowArgs} args - Arguments to find a Conference
     * @example
     * // Get one Conference
     * const conference = await prisma.conference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConferenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConferenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Conference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceFindFirstArgs} args - Arguments to find a Conference
     * @example
     * // Get one Conference
     * const conference = await prisma.conference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConferenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConferenceFindFirstArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Conference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceFindFirstOrThrowArgs} args - Arguments to find a Conference
     * @example
     * // Get one Conference
     * const conference = await prisma.conference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConferenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConferenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Conferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conferences
     * const conferences = await prisma.conference.findMany()
     * 
     * // Get first 10 Conferences
     * const conferences = await prisma.conference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conferenceWithIdOnly = await prisma.conference.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConferenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConferenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Conference.
     * @param {ConferenceCreateArgs} args - Arguments to create a Conference.
     * @example
     * // Create one Conference
     * const Conference = await prisma.conference.create({
     *   data: {
     *     // ... data to create a Conference
     *   }
     * })
     * 
    **/
    create<T extends ConferenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConferenceCreateArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Conference.
     * @param {ConferenceDeleteArgs} args - Arguments to delete one Conference.
     * @example
     * // Delete one Conference
     * const Conference = await prisma.conference.delete({
     *   where: {
     *     // ... filter to delete one Conference
     *   }
     * })
     * 
    **/
    delete<T extends ConferenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConferenceDeleteArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Conference.
     * @param {ConferenceUpdateArgs} args - Arguments to update one Conference.
     * @example
     * // Update one Conference
     * const conference = await prisma.conference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConferenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConferenceUpdateArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Conferences.
     * @param {ConferenceDeleteManyArgs} args - Arguments to filter Conferences to delete.
     * @example
     * // Delete a few Conferences
     * const { count } = await prisma.conference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConferenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConferenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conferences
     * const conference = await prisma.conference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConferenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConferenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conference.
     * @param {ConferenceUpsertArgs} args - Arguments to update or create a Conference.
     * @example
     * // Update or create a Conference
     * const conference = await prisma.conference.upsert({
     *   create: {
     *     // ... data to create a Conference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conference we want to update
     *   }
     * })
    **/
    upsert<T extends ConferenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConferenceUpsertArgs<ExtArgs>>
    ): Prisma__ConferenceClient<$Result.GetResult<Prisma.$ConferencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Conferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceCountArgs} args - Arguments to filter Conferences to count.
     * @example
     * // Count the number of Conferences
     * const count = await prisma.conference.count({
     *   where: {
     *     // ... the filter for the Conferences we want to count
     *   }
     * })
    **/
    count<T extends ConferenceCountArgs>(
      args?: Subset<T, ConferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConferenceAggregateArgs>(args: Subset<T, ConferenceAggregateArgs>): Prisma.PrismaPromise<GetConferenceAggregateType<T>>

    /**
     * Group by Conference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConferenceGroupByArgs['orderBy'] }
        : { orderBy?: ConferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conference model
   */
  readonly fields: ConferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConferenceClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Conference model
   */ 
  interface ConferenceFieldRefs {
    readonly id: FieldRef<"Conference", 'Int'>
    readonly titre: FieldRef<"Conference", 'String'>
    readonly description: FieldRef<"Conference", 'String'>
    readonly imagePath: FieldRef<"Conference", 'String'>
    readonly lien: FieldRef<"Conference", 'String'>
    readonly lieu: FieldRef<"Conference", 'String'>
    readonly date: FieldRef<"Conference", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Conference findUnique
   */
  export type ConferenceFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * Filter, which Conference to fetch.
     */
    where: ConferenceWhereUniqueInput
  }


  /**
   * Conference findUniqueOrThrow
   */
  export type ConferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * Filter, which Conference to fetch.
     */
    where: ConferenceWhereUniqueInput
  }


  /**
   * Conference findFirst
   */
  export type ConferenceFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * Filter, which Conference to fetch.
     */
    where?: ConferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conferences to fetch.
     */
    orderBy?: ConferenceOrderByWithRelationInput | ConferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conferences.
     */
    cursor?: ConferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conferences.
     */
    distinct?: ConferenceScalarFieldEnum | ConferenceScalarFieldEnum[]
  }


  /**
   * Conference findFirstOrThrow
   */
  export type ConferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * Filter, which Conference to fetch.
     */
    where?: ConferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conferences to fetch.
     */
    orderBy?: ConferenceOrderByWithRelationInput | ConferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conferences.
     */
    cursor?: ConferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conferences.
     */
    distinct?: ConferenceScalarFieldEnum | ConferenceScalarFieldEnum[]
  }


  /**
   * Conference findMany
   */
  export type ConferenceFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * Filter, which Conferences to fetch.
     */
    where?: ConferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conferences to fetch.
     */
    orderBy?: ConferenceOrderByWithRelationInput | ConferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conferences.
     */
    cursor?: ConferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conferences.
     */
    skip?: number
    distinct?: ConferenceScalarFieldEnum | ConferenceScalarFieldEnum[]
  }


  /**
   * Conference create
   */
  export type ConferenceCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * The data needed to create a Conference.
     */
    data: XOR<ConferenceCreateInput, ConferenceUncheckedCreateInput>
  }


  /**
   * Conference update
   */
  export type ConferenceUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * The data needed to update a Conference.
     */
    data: XOR<ConferenceUpdateInput, ConferenceUncheckedUpdateInput>
    /**
     * Choose, which Conference to update.
     */
    where: ConferenceWhereUniqueInput
  }


  /**
   * Conference updateMany
   */
  export type ConferenceUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conferences.
     */
    data: XOR<ConferenceUpdateManyMutationInput, ConferenceUncheckedUpdateManyInput>
    /**
     * Filter which Conferences to update
     */
    where?: ConferenceWhereInput
  }


  /**
   * Conference upsert
   */
  export type ConferenceUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * The filter to search for the Conference to update in case it exists.
     */
    where: ConferenceWhereUniqueInput
    /**
     * In case the Conference found by the `where` argument doesn't exist, create a new Conference with this data.
     */
    create: XOR<ConferenceCreateInput, ConferenceUncheckedCreateInput>
    /**
     * In case the Conference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConferenceUpdateInput, ConferenceUncheckedUpdateInput>
  }


  /**
   * Conference delete
   */
  export type ConferenceDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
    /**
     * Filter which Conference to delete.
     */
    where: ConferenceWhereUniqueInput
  }


  /**
   * Conference deleteMany
   */
  export type ConferenceDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conferences to delete
     */
    where?: ConferenceWhereInput
  }


  /**
   * Conference without action
   */
  export type ConferenceDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conference
     */
    select?: ConferenceSelect<ExtArgs> | null
  }



  /**
   * Model ThemeFormation
   */

  export type AggregateThemeFormation = {
    _count: ThemeFormationCountAggregateOutputType | null
    _avg: ThemeFormationAvgAggregateOutputType | null
    _sum: ThemeFormationSumAggregateOutputType | null
    _min: ThemeFormationMinAggregateOutputType | null
    _max: ThemeFormationMaxAggregateOutputType | null
  }

  export type ThemeFormationAvgAggregateOutputType = {
    id: number | null
  }

  export type ThemeFormationSumAggregateOutputType = {
    id: number | null
  }

  export type ThemeFormationMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
  }

  export type ThemeFormationMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
  }

  export type ThemeFormationCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    _all: number
  }


  export type ThemeFormationAvgAggregateInputType = {
    id?: true
  }

  export type ThemeFormationSumAggregateInputType = {
    id?: true
  }

  export type ThemeFormationMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
  }

  export type ThemeFormationMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
  }

  export type ThemeFormationCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    _all?: true
  }

  export type ThemeFormationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeFormation to aggregate.
     */
    where?: ThemeFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeFormations to fetch.
     */
    orderBy?: ThemeFormationOrderByWithRelationInput | ThemeFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemeFormations
    **/
    _count?: true | ThemeFormationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeFormationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeFormationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeFormationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeFormationMaxAggregateInputType
  }

  export type GetThemeFormationAggregateType<T extends ThemeFormationAggregateArgs> = {
        [P in keyof T & keyof AggregateThemeFormation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemeFormation[P]>
      : GetScalarType<T[P], AggregateThemeFormation[P]>
  }




  export type ThemeFormationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ThemeFormationWhereInput
    orderBy?: ThemeFormationOrderByWithAggregationInput | ThemeFormationOrderByWithAggregationInput[]
    by: ThemeFormationScalarFieldEnum[] | ThemeFormationScalarFieldEnum
    having?: ThemeFormationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeFormationCountAggregateInputType | true
    _avg?: ThemeFormationAvgAggregateInputType
    _sum?: ThemeFormationSumAggregateInputType
    _min?: ThemeFormationMinAggregateInputType
    _max?: ThemeFormationMaxAggregateInputType
  }

  export type ThemeFormationGroupByOutputType = {
    id: number
    titre: string
    description: string
    _count: ThemeFormationCountAggregateOutputType | null
    _avg: ThemeFormationAvgAggregateOutputType | null
    _sum: ThemeFormationSumAggregateOutputType | null
    _min: ThemeFormationMinAggregateOutputType | null
    _max: ThemeFormationMaxAggregateOutputType | null
  }

  type GetThemeFormationGroupByPayload<T extends ThemeFormationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeFormationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeFormationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeFormationGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeFormationGroupByOutputType[P]>
        }
      >
    >


  export type ThemeFormationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    contentFormations?: boolean | ThemeFormation$contentFormationsArgs<ExtArgs>
    _count?: boolean | ThemeFormationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["themeFormation"]>

  export type ThemeFormationSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
  }

  export type ThemeFormationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contentFormations?: boolean | ThemeFormation$contentFormationsArgs<ExtArgs>
    _count?: boolean | ThemeFormationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ThemeFormationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ThemeFormation"
    objects: {
      contentFormations: Prisma.$ContentFormationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      titre: string
      description: string
    }, ExtArgs["result"]["themeFormation"]>
    composites: {}
  }


  type ThemeFormationGetPayload<S extends boolean | null | undefined | ThemeFormationDefaultArgs> = $Result.GetResult<Prisma.$ThemeFormationPayload, S>

  type ThemeFormationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ThemeFormationFindManyArgs, 'select' | 'include'> & {
      select?: ThemeFormationCountAggregateInputType | true
    }

  export interface ThemeFormationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThemeFormation'], meta: { name: 'ThemeFormation' } }
    /**
     * Find zero or one ThemeFormation that matches the filter.
     * @param {ThemeFormationFindUniqueArgs} args - Arguments to find a ThemeFormation
     * @example
     * // Get one ThemeFormation
     * const themeFormation = await prisma.themeFormation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThemeFormationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThemeFormationFindUniqueArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ThemeFormation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThemeFormationFindUniqueOrThrowArgs} args - Arguments to find a ThemeFormation
     * @example
     * // Get one ThemeFormation
     * const themeFormation = await prisma.themeFormation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThemeFormationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThemeFormationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ThemeFormation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationFindFirstArgs} args - Arguments to find a ThemeFormation
     * @example
     * // Get one ThemeFormation
     * const themeFormation = await prisma.themeFormation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThemeFormationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThemeFormationFindFirstArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ThemeFormation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationFindFirstOrThrowArgs} args - Arguments to find a ThemeFormation
     * @example
     * // Get one ThemeFormation
     * const themeFormation = await prisma.themeFormation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThemeFormationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThemeFormationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ThemeFormations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemeFormations
     * const themeFormations = await prisma.themeFormation.findMany()
     * 
     * // Get first 10 ThemeFormations
     * const themeFormations = await prisma.themeFormation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeFormationWithIdOnly = await prisma.themeFormation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThemeFormationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThemeFormationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ThemeFormation.
     * @param {ThemeFormationCreateArgs} args - Arguments to create a ThemeFormation.
     * @example
     * // Create one ThemeFormation
     * const ThemeFormation = await prisma.themeFormation.create({
     *   data: {
     *     // ... data to create a ThemeFormation
     *   }
     * })
     * 
    **/
    create<T extends ThemeFormationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThemeFormationCreateArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a ThemeFormation.
     * @param {ThemeFormationDeleteArgs} args - Arguments to delete one ThemeFormation.
     * @example
     * // Delete one ThemeFormation
     * const ThemeFormation = await prisma.themeFormation.delete({
     *   where: {
     *     // ... filter to delete one ThemeFormation
     *   }
     * })
     * 
    **/
    delete<T extends ThemeFormationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThemeFormationDeleteArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ThemeFormation.
     * @param {ThemeFormationUpdateArgs} args - Arguments to update one ThemeFormation.
     * @example
     * // Update one ThemeFormation
     * const themeFormation = await prisma.themeFormation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThemeFormationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThemeFormationUpdateArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ThemeFormations.
     * @param {ThemeFormationDeleteManyArgs} args - Arguments to filter ThemeFormations to delete.
     * @example
     * // Delete a few ThemeFormations
     * const { count } = await prisma.themeFormation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThemeFormationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThemeFormationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeFormations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemeFormations
     * const themeFormation = await prisma.themeFormation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThemeFormationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThemeFormationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThemeFormation.
     * @param {ThemeFormationUpsertArgs} args - Arguments to update or create a ThemeFormation.
     * @example
     * // Update or create a ThemeFormation
     * const themeFormation = await prisma.themeFormation.upsert({
     *   create: {
     *     // ... data to create a ThemeFormation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemeFormation we want to update
     *   }
     * })
    **/
    upsert<T extends ThemeFormationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThemeFormationUpsertArgs<ExtArgs>>
    ): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ThemeFormations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationCountArgs} args - Arguments to filter ThemeFormations to count.
     * @example
     * // Count the number of ThemeFormations
     * const count = await prisma.themeFormation.count({
     *   where: {
     *     // ... the filter for the ThemeFormations we want to count
     *   }
     * })
    **/
    count<T extends ThemeFormationCountArgs>(
      args?: Subset<T, ThemeFormationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeFormationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemeFormation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeFormationAggregateArgs>(args: Subset<T, ThemeFormationAggregateArgs>): Prisma.PrismaPromise<GetThemeFormationAggregateType<T>>

    /**
     * Group by ThemeFormation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFormationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeFormationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeFormationGroupByArgs['orderBy'] }
        : { orderBy?: ThemeFormationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeFormationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeFormationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThemeFormation model
   */
  readonly fields: ThemeFormationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemeFormation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeFormationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    contentFormations<T extends ThemeFormation$contentFormationsArgs<ExtArgs> = {}>(args?: Subset<T, ThemeFormation$contentFormationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ThemeFormation model
   */ 
  interface ThemeFormationFieldRefs {
    readonly id: FieldRef<"ThemeFormation", 'Int'>
    readonly titre: FieldRef<"ThemeFormation", 'String'>
    readonly description: FieldRef<"ThemeFormation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ThemeFormation findUnique
   */
  export type ThemeFormationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * Filter, which ThemeFormation to fetch.
     */
    where: ThemeFormationWhereUniqueInput
  }


  /**
   * ThemeFormation findUniqueOrThrow
   */
  export type ThemeFormationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * Filter, which ThemeFormation to fetch.
     */
    where: ThemeFormationWhereUniqueInput
  }


  /**
   * ThemeFormation findFirst
   */
  export type ThemeFormationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * Filter, which ThemeFormation to fetch.
     */
    where?: ThemeFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeFormations to fetch.
     */
    orderBy?: ThemeFormationOrderByWithRelationInput | ThemeFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeFormations.
     */
    cursor?: ThemeFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeFormations.
     */
    distinct?: ThemeFormationScalarFieldEnum | ThemeFormationScalarFieldEnum[]
  }


  /**
   * ThemeFormation findFirstOrThrow
   */
  export type ThemeFormationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * Filter, which ThemeFormation to fetch.
     */
    where?: ThemeFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeFormations to fetch.
     */
    orderBy?: ThemeFormationOrderByWithRelationInput | ThemeFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeFormations.
     */
    cursor?: ThemeFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeFormations.
     */
    distinct?: ThemeFormationScalarFieldEnum | ThemeFormationScalarFieldEnum[]
  }


  /**
   * ThemeFormation findMany
   */
  export type ThemeFormationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * Filter, which ThemeFormations to fetch.
     */
    where?: ThemeFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeFormations to fetch.
     */
    orderBy?: ThemeFormationOrderByWithRelationInput | ThemeFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemeFormations.
     */
    cursor?: ThemeFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeFormations.
     */
    skip?: number
    distinct?: ThemeFormationScalarFieldEnum | ThemeFormationScalarFieldEnum[]
  }


  /**
   * ThemeFormation create
   */
  export type ThemeFormationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * The data needed to create a ThemeFormation.
     */
    data: XOR<ThemeFormationCreateInput, ThemeFormationUncheckedCreateInput>
  }


  /**
   * ThemeFormation update
   */
  export type ThemeFormationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * The data needed to update a ThemeFormation.
     */
    data: XOR<ThemeFormationUpdateInput, ThemeFormationUncheckedUpdateInput>
    /**
     * Choose, which ThemeFormation to update.
     */
    where: ThemeFormationWhereUniqueInput
  }


  /**
   * ThemeFormation updateMany
   */
  export type ThemeFormationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThemeFormations.
     */
    data: XOR<ThemeFormationUpdateManyMutationInput, ThemeFormationUncheckedUpdateManyInput>
    /**
     * Filter which ThemeFormations to update
     */
    where?: ThemeFormationWhereInput
  }


  /**
   * ThemeFormation upsert
   */
  export type ThemeFormationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * The filter to search for the ThemeFormation to update in case it exists.
     */
    where: ThemeFormationWhereUniqueInput
    /**
     * In case the ThemeFormation found by the `where` argument doesn't exist, create a new ThemeFormation with this data.
     */
    create: XOR<ThemeFormationCreateInput, ThemeFormationUncheckedCreateInput>
    /**
     * In case the ThemeFormation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeFormationUpdateInput, ThemeFormationUncheckedUpdateInput>
  }


  /**
   * ThemeFormation delete
   */
  export type ThemeFormationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
    /**
     * Filter which ThemeFormation to delete.
     */
    where: ThemeFormationWhereUniqueInput
  }


  /**
   * ThemeFormation deleteMany
   */
  export type ThemeFormationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeFormations to delete
     */
    where?: ThemeFormationWhereInput
  }


  /**
   * ThemeFormation.contentFormations
   */
  export type ThemeFormation$contentFormationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    where?: ContentFormationWhereInput
    orderBy?: ContentFormationOrderByWithRelationInput | ContentFormationOrderByWithRelationInput[]
    cursor?: ContentFormationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentFormationScalarFieldEnum | ContentFormationScalarFieldEnum[]
  }


  /**
   * ThemeFormation without action
   */
  export type ThemeFormationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeFormation
     */
    select?: ThemeFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThemeFormationInclude<ExtArgs> | null
  }



  /**
   * Model ContentFormation
   */

  export type AggregateContentFormation = {
    _count: ContentFormationCountAggregateOutputType | null
    _avg: ContentFormationAvgAggregateOutputType | null
    _sum: ContentFormationSumAggregateOutputType | null
    _min: ContentFormationMinAggregateOutputType | null
    _max: ContentFormationMaxAggregateOutputType | null
  }

  export type ContentFormationAvgAggregateOutputType = {
    id: number | null
    themeFormationId: number | null
  }

  export type ContentFormationSumAggregateOutputType = {
    id: number | null
    themeFormationId: number | null
  }

  export type ContentFormationMinAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    path: string | null
    themeFormationId: number | null
  }

  export type ContentFormationMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    description: string | null
    path: string | null
    themeFormationId: number | null
  }

  export type ContentFormationCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    path: number
    themeFormationId: number
    _all: number
  }


  export type ContentFormationAvgAggregateInputType = {
    id?: true
    themeFormationId?: true
  }

  export type ContentFormationSumAggregateInputType = {
    id?: true
    themeFormationId?: true
  }

  export type ContentFormationMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    path?: true
    themeFormationId?: true
  }

  export type ContentFormationMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    path?: true
    themeFormationId?: true
  }

  export type ContentFormationCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    path?: true
    themeFormationId?: true
    _all?: true
  }

  export type ContentFormationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentFormation to aggregate.
     */
    where?: ContentFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentFormations to fetch.
     */
    orderBy?: ContentFormationOrderByWithRelationInput | ContentFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentFormations
    **/
    _count?: true | ContentFormationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentFormationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentFormationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentFormationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentFormationMaxAggregateInputType
  }

  export type GetContentFormationAggregateType<T extends ContentFormationAggregateArgs> = {
        [P in keyof T & keyof AggregateContentFormation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentFormation[P]>
      : GetScalarType<T[P], AggregateContentFormation[P]>
  }




  export type ContentFormationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContentFormationWhereInput
    orderBy?: ContentFormationOrderByWithAggregationInput | ContentFormationOrderByWithAggregationInput[]
    by: ContentFormationScalarFieldEnum[] | ContentFormationScalarFieldEnum
    having?: ContentFormationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentFormationCountAggregateInputType | true
    _avg?: ContentFormationAvgAggregateInputType
    _sum?: ContentFormationSumAggregateInputType
    _min?: ContentFormationMinAggregateInputType
    _max?: ContentFormationMaxAggregateInputType
  }

  export type ContentFormationGroupByOutputType = {
    id: number
    titre: string
    description: string
    path: string
    themeFormationId: number
    _count: ContentFormationCountAggregateOutputType | null
    _avg: ContentFormationAvgAggregateOutputType | null
    _sum: ContentFormationSumAggregateOutputType | null
    _min: ContentFormationMinAggregateOutputType | null
    _max: ContentFormationMaxAggregateOutputType | null
  }

  type GetContentFormationGroupByPayload<T extends ContentFormationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentFormationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentFormationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentFormationGroupByOutputType[P]>
            : GetScalarType<T[P], ContentFormationGroupByOutputType[P]>
        }
      >
    >


  export type ContentFormationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    path?: boolean
    themeFormationId?: boolean
    themeFormation?: boolean | ThemeFormationDefaultArgs<ExtArgs>
    commentaires?: boolean | ContentFormation$commentairesArgs<ExtArgs>
    _count?: boolean | ContentFormationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentFormation"]>

  export type ContentFormationSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    path?: boolean
    themeFormationId?: boolean
  }

  export type ContentFormationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    themeFormation?: boolean | ThemeFormationDefaultArgs<ExtArgs>
    commentaires?: boolean | ContentFormation$commentairesArgs<ExtArgs>
    _count?: boolean | ContentFormationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ContentFormationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ContentFormation"
    objects: {
      themeFormation: Prisma.$ThemeFormationPayload<ExtArgs>
      commentaires: Prisma.$CommentaireFormationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      titre: string
      description: string
      path: string
      themeFormationId: number
    }, ExtArgs["result"]["contentFormation"]>
    composites: {}
  }


  type ContentFormationGetPayload<S extends boolean | null | undefined | ContentFormationDefaultArgs> = $Result.GetResult<Prisma.$ContentFormationPayload, S>

  type ContentFormationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ContentFormationFindManyArgs, 'select' | 'include'> & {
      select?: ContentFormationCountAggregateInputType | true
    }

  export interface ContentFormationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContentFormation'], meta: { name: 'ContentFormation' } }
    /**
     * Find zero or one ContentFormation that matches the filter.
     * @param {ContentFormationFindUniqueArgs} args - Arguments to find a ContentFormation
     * @example
     * // Get one ContentFormation
     * const contentFormation = await prisma.contentFormation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContentFormationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFormationFindUniqueArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ContentFormation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContentFormationFindUniqueOrThrowArgs} args - Arguments to find a ContentFormation
     * @example
     * // Get one ContentFormation
     * const contentFormation = await prisma.contentFormation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContentFormationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFormationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ContentFormation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationFindFirstArgs} args - Arguments to find a ContentFormation
     * @example
     * // Get one ContentFormation
     * const contentFormation = await prisma.contentFormation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContentFormationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFormationFindFirstArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ContentFormation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationFindFirstOrThrowArgs} args - Arguments to find a ContentFormation
     * @example
     * // Get one ContentFormation
     * const contentFormation = await prisma.contentFormation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContentFormationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFormationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ContentFormations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentFormations
     * const contentFormations = await prisma.contentFormation.findMany()
     * 
     * // Get first 10 ContentFormations
     * const contentFormations = await prisma.contentFormation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentFormationWithIdOnly = await prisma.contentFormation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContentFormationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFormationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ContentFormation.
     * @param {ContentFormationCreateArgs} args - Arguments to create a ContentFormation.
     * @example
     * // Create one ContentFormation
     * const ContentFormation = await prisma.contentFormation.create({
     *   data: {
     *     // ... data to create a ContentFormation
     *   }
     * })
     * 
    **/
    create<T extends ContentFormationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFormationCreateArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a ContentFormation.
     * @param {ContentFormationDeleteArgs} args - Arguments to delete one ContentFormation.
     * @example
     * // Delete one ContentFormation
     * const ContentFormation = await prisma.contentFormation.delete({
     *   where: {
     *     // ... filter to delete one ContentFormation
     *   }
     * })
     * 
    **/
    delete<T extends ContentFormationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFormationDeleteArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ContentFormation.
     * @param {ContentFormationUpdateArgs} args - Arguments to update one ContentFormation.
     * @example
     * // Update one ContentFormation
     * const contentFormation = await prisma.contentFormation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContentFormationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFormationUpdateArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ContentFormations.
     * @param {ContentFormationDeleteManyArgs} args - Arguments to filter ContentFormations to delete.
     * @example
     * // Delete a few ContentFormations
     * const { count } = await prisma.contentFormation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContentFormationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFormationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentFormations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentFormations
     * const contentFormation = await prisma.contentFormation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContentFormationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFormationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContentFormation.
     * @param {ContentFormationUpsertArgs} args - Arguments to update or create a ContentFormation.
     * @example
     * // Update or create a ContentFormation
     * const contentFormation = await prisma.contentFormation.upsert({
     *   create: {
     *     // ... data to create a ContentFormation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentFormation we want to update
     *   }
     * })
    **/
    upsert<T extends ContentFormationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFormationUpsertArgs<ExtArgs>>
    ): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ContentFormations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationCountArgs} args - Arguments to filter ContentFormations to count.
     * @example
     * // Count the number of ContentFormations
     * const count = await prisma.contentFormation.count({
     *   where: {
     *     // ... the filter for the ContentFormations we want to count
     *   }
     * })
    **/
    count<T extends ContentFormationCountArgs>(
      args?: Subset<T, ContentFormationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentFormationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentFormation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentFormationAggregateArgs>(args: Subset<T, ContentFormationAggregateArgs>): Prisma.PrismaPromise<GetContentFormationAggregateType<T>>

    /**
     * Group by ContentFormation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFormationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentFormationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentFormationGroupByArgs['orderBy'] }
        : { orderBy?: ContentFormationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentFormationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentFormationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContentFormation model
   */
  readonly fields: ContentFormationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentFormation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentFormationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    themeFormation<T extends ThemeFormationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThemeFormationDefaultArgs<ExtArgs>>): Prisma__ThemeFormationClient<$Result.GetResult<Prisma.$ThemeFormationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    commentaires<T extends ContentFormation$commentairesArgs<ExtArgs> = {}>(args?: Subset<T, ContentFormation$commentairesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ContentFormation model
   */ 
  interface ContentFormationFieldRefs {
    readonly id: FieldRef<"ContentFormation", 'Int'>
    readonly titre: FieldRef<"ContentFormation", 'String'>
    readonly description: FieldRef<"ContentFormation", 'String'>
    readonly path: FieldRef<"ContentFormation", 'String'>
    readonly themeFormationId: FieldRef<"ContentFormation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ContentFormation findUnique
   */
  export type ContentFormationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * Filter, which ContentFormation to fetch.
     */
    where: ContentFormationWhereUniqueInput
  }


  /**
   * ContentFormation findUniqueOrThrow
   */
  export type ContentFormationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * Filter, which ContentFormation to fetch.
     */
    where: ContentFormationWhereUniqueInput
  }


  /**
   * ContentFormation findFirst
   */
  export type ContentFormationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * Filter, which ContentFormation to fetch.
     */
    where?: ContentFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentFormations to fetch.
     */
    orderBy?: ContentFormationOrderByWithRelationInput | ContentFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentFormations.
     */
    cursor?: ContentFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentFormations.
     */
    distinct?: ContentFormationScalarFieldEnum | ContentFormationScalarFieldEnum[]
  }


  /**
   * ContentFormation findFirstOrThrow
   */
  export type ContentFormationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * Filter, which ContentFormation to fetch.
     */
    where?: ContentFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentFormations to fetch.
     */
    orderBy?: ContentFormationOrderByWithRelationInput | ContentFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentFormations.
     */
    cursor?: ContentFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentFormations.
     */
    distinct?: ContentFormationScalarFieldEnum | ContentFormationScalarFieldEnum[]
  }


  /**
   * ContentFormation findMany
   */
  export type ContentFormationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * Filter, which ContentFormations to fetch.
     */
    where?: ContentFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentFormations to fetch.
     */
    orderBy?: ContentFormationOrderByWithRelationInput | ContentFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentFormations.
     */
    cursor?: ContentFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentFormations.
     */
    skip?: number
    distinct?: ContentFormationScalarFieldEnum | ContentFormationScalarFieldEnum[]
  }


  /**
   * ContentFormation create
   */
  export type ContentFormationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * The data needed to create a ContentFormation.
     */
    data: XOR<ContentFormationCreateInput, ContentFormationUncheckedCreateInput>
  }


  /**
   * ContentFormation update
   */
  export type ContentFormationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * The data needed to update a ContentFormation.
     */
    data: XOR<ContentFormationUpdateInput, ContentFormationUncheckedUpdateInput>
    /**
     * Choose, which ContentFormation to update.
     */
    where: ContentFormationWhereUniqueInput
  }


  /**
   * ContentFormation updateMany
   */
  export type ContentFormationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContentFormations.
     */
    data: XOR<ContentFormationUpdateManyMutationInput, ContentFormationUncheckedUpdateManyInput>
    /**
     * Filter which ContentFormations to update
     */
    where?: ContentFormationWhereInput
  }


  /**
   * ContentFormation upsert
   */
  export type ContentFormationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * The filter to search for the ContentFormation to update in case it exists.
     */
    where: ContentFormationWhereUniqueInput
    /**
     * In case the ContentFormation found by the `where` argument doesn't exist, create a new ContentFormation with this data.
     */
    create: XOR<ContentFormationCreateInput, ContentFormationUncheckedCreateInput>
    /**
     * In case the ContentFormation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentFormationUpdateInput, ContentFormationUncheckedUpdateInput>
  }


  /**
   * ContentFormation delete
   */
  export type ContentFormationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
    /**
     * Filter which ContentFormation to delete.
     */
    where: ContentFormationWhereUniqueInput
  }


  /**
   * ContentFormation deleteMany
   */
  export type ContentFormationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentFormations to delete
     */
    where?: ContentFormationWhereInput
  }


  /**
   * ContentFormation.commentaires
   */
  export type ContentFormation$commentairesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    where?: CommentaireFormationWhereInput
    orderBy?: CommentaireFormationOrderByWithRelationInput | CommentaireFormationOrderByWithRelationInput[]
    cursor?: CommentaireFormationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentaireFormationScalarFieldEnum | CommentaireFormationScalarFieldEnum[]
  }


  /**
   * ContentFormation without action
   */
  export type ContentFormationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentFormation
     */
    select?: ContentFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContentFormationInclude<ExtArgs> | null
  }



  /**
   * Model CommentaireFormation
   */

  export type AggregateCommentaireFormation = {
    _count: CommentaireFormationCountAggregateOutputType | null
    _avg: CommentaireFormationAvgAggregateOutputType | null
    _sum: CommentaireFormationSumAggregateOutputType | null
    _min: CommentaireFormationMinAggregateOutputType | null
    _max: CommentaireFormationMaxAggregateOutputType | null
  }

  export type CommentaireFormationAvgAggregateOutputType = {
    id: number | null
    formationId: number | null
  }

  export type CommentaireFormationSumAggregateOutputType = {
    id: number | null
    formationId: number | null
  }

  export type CommentaireFormationMinAggregateOutputType = {
    id: number | null
    contenu: string | null
    auteur: string | null
    date: Date | null
    formationId: number | null
  }

  export type CommentaireFormationMaxAggregateOutputType = {
    id: number | null
    contenu: string | null
    auteur: string | null
    date: Date | null
    formationId: number | null
  }

  export type CommentaireFormationCountAggregateOutputType = {
    id: number
    contenu: number
    auteur: number
    date: number
    formationId: number
    _all: number
  }


  export type CommentaireFormationAvgAggregateInputType = {
    id?: true
    formationId?: true
  }

  export type CommentaireFormationSumAggregateInputType = {
    id?: true
    formationId?: true
  }

  export type CommentaireFormationMinAggregateInputType = {
    id?: true
    contenu?: true
    auteur?: true
    date?: true
    formationId?: true
  }

  export type CommentaireFormationMaxAggregateInputType = {
    id?: true
    contenu?: true
    auteur?: true
    date?: true
    formationId?: true
  }

  export type CommentaireFormationCountAggregateInputType = {
    id?: true
    contenu?: true
    auteur?: true
    date?: true
    formationId?: true
    _all?: true
  }

  export type CommentaireFormationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentaireFormation to aggregate.
     */
    where?: CommentaireFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentaireFormations to fetch.
     */
    orderBy?: CommentaireFormationOrderByWithRelationInput | CommentaireFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentaireFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentaireFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentaireFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommentaireFormations
    **/
    _count?: true | CommentaireFormationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentaireFormationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentaireFormationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentaireFormationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentaireFormationMaxAggregateInputType
  }

  export type GetCommentaireFormationAggregateType<T extends CommentaireFormationAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentaireFormation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentaireFormation[P]>
      : GetScalarType<T[P], AggregateCommentaireFormation[P]>
  }




  export type CommentaireFormationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CommentaireFormationWhereInput
    orderBy?: CommentaireFormationOrderByWithAggregationInput | CommentaireFormationOrderByWithAggregationInput[]
    by: CommentaireFormationScalarFieldEnum[] | CommentaireFormationScalarFieldEnum
    having?: CommentaireFormationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentaireFormationCountAggregateInputType | true
    _avg?: CommentaireFormationAvgAggregateInputType
    _sum?: CommentaireFormationSumAggregateInputType
    _min?: CommentaireFormationMinAggregateInputType
    _max?: CommentaireFormationMaxAggregateInputType
  }

  export type CommentaireFormationGroupByOutputType = {
    id: number
    contenu: string
    auteur: string
    date: Date
    formationId: number
    _count: CommentaireFormationCountAggregateOutputType | null
    _avg: CommentaireFormationAvgAggregateOutputType | null
    _sum: CommentaireFormationSumAggregateOutputType | null
    _min: CommentaireFormationMinAggregateOutputType | null
    _max: CommentaireFormationMaxAggregateOutputType | null
  }

  type GetCommentaireFormationGroupByPayload<T extends CommentaireFormationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentaireFormationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentaireFormationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentaireFormationGroupByOutputType[P]>
            : GetScalarType<T[P], CommentaireFormationGroupByOutputType[P]>
        }
      >
    >


  export type CommentaireFormationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contenu?: boolean
    auteur?: boolean
    date?: boolean
    formationId?: boolean
    formation?: boolean | ContentFormationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentaireFormation"]>

  export type CommentaireFormationSelectScalar = {
    id?: boolean
    contenu?: boolean
    auteur?: boolean
    date?: boolean
    formationId?: boolean
  }

  export type CommentaireFormationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    formation?: boolean | ContentFormationDefaultArgs<ExtArgs>
  }


  export type $CommentaireFormationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "CommentaireFormation"
    objects: {
      formation: Prisma.$ContentFormationPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      contenu: string
      auteur: string
      date: Date
      formationId: number
    }, ExtArgs["result"]["commentaireFormation"]>
    composites: {}
  }


  type CommentaireFormationGetPayload<S extends boolean | null | undefined | CommentaireFormationDefaultArgs> = $Result.GetResult<Prisma.$CommentaireFormationPayload, S>

  type CommentaireFormationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CommentaireFormationFindManyArgs, 'select' | 'include'> & {
      select?: CommentaireFormationCountAggregateInputType | true
    }

  export interface CommentaireFormationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommentaireFormation'], meta: { name: 'CommentaireFormation' } }
    /**
     * Find zero or one CommentaireFormation that matches the filter.
     * @param {CommentaireFormationFindUniqueArgs} args - Arguments to find a CommentaireFormation
     * @example
     * // Get one CommentaireFormation
     * const commentaireFormation = await prisma.commentaireFormation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentaireFormationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentaireFormationFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommentaireFormation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentaireFormationFindUniqueOrThrowArgs} args - Arguments to find a CommentaireFormation
     * @example
     * // Get one CommentaireFormation
     * const commentaireFormation = await prisma.commentaireFormation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentaireFormationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentaireFormationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommentaireFormation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationFindFirstArgs} args - Arguments to find a CommentaireFormation
     * @example
     * // Get one CommentaireFormation
     * const commentaireFormation = await prisma.commentaireFormation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentaireFormationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentaireFormationFindFirstArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommentaireFormation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationFindFirstOrThrowArgs} args - Arguments to find a CommentaireFormation
     * @example
     * // Get one CommentaireFormation
     * const commentaireFormation = await prisma.commentaireFormation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentaireFormationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentaireFormationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommentaireFormations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentaireFormations
     * const commentaireFormations = await prisma.commentaireFormation.findMany()
     * 
     * // Get first 10 CommentaireFormations
     * const commentaireFormations = await prisma.commentaireFormation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentaireFormationWithIdOnly = await prisma.commentaireFormation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentaireFormationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentaireFormationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommentaireFormation.
     * @param {CommentaireFormationCreateArgs} args - Arguments to create a CommentaireFormation.
     * @example
     * // Create one CommentaireFormation
     * const CommentaireFormation = await prisma.commentaireFormation.create({
     *   data: {
     *     // ... data to create a CommentaireFormation
     *   }
     * })
     * 
    **/
    create<T extends CommentaireFormationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentaireFormationCreateArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a CommentaireFormation.
     * @param {CommentaireFormationDeleteArgs} args - Arguments to delete one CommentaireFormation.
     * @example
     * // Delete one CommentaireFormation
     * const CommentaireFormation = await prisma.commentaireFormation.delete({
     *   where: {
     *     // ... filter to delete one CommentaireFormation
     *   }
     * })
     * 
    **/
    delete<T extends CommentaireFormationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentaireFormationDeleteArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommentaireFormation.
     * @param {CommentaireFormationUpdateArgs} args - Arguments to update one CommentaireFormation.
     * @example
     * // Update one CommentaireFormation
     * const commentaireFormation = await prisma.commentaireFormation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentaireFormationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentaireFormationUpdateArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommentaireFormations.
     * @param {CommentaireFormationDeleteManyArgs} args - Arguments to filter CommentaireFormations to delete.
     * @example
     * // Delete a few CommentaireFormations
     * const { count } = await prisma.commentaireFormation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentaireFormationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentaireFormationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentaireFormations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentaireFormations
     * const commentaireFormation = await prisma.commentaireFormation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentaireFormationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentaireFormationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommentaireFormation.
     * @param {CommentaireFormationUpsertArgs} args - Arguments to update or create a CommentaireFormation.
     * @example
     * // Update or create a CommentaireFormation
     * const commentaireFormation = await prisma.commentaireFormation.upsert({
     *   create: {
     *     // ... data to create a CommentaireFormation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentaireFormation we want to update
     *   }
     * })
    **/
    upsert<T extends CommentaireFormationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentaireFormationUpsertArgs<ExtArgs>>
    ): Prisma__CommentaireFormationClient<$Result.GetResult<Prisma.$CommentaireFormationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommentaireFormations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationCountArgs} args - Arguments to filter CommentaireFormations to count.
     * @example
     * // Count the number of CommentaireFormations
     * const count = await prisma.commentaireFormation.count({
     *   where: {
     *     // ... the filter for the CommentaireFormations we want to count
     *   }
     * })
    **/
    count<T extends CommentaireFormationCountArgs>(
      args?: Subset<T, CommentaireFormationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentaireFormationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentaireFormation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentaireFormationAggregateArgs>(args: Subset<T, CommentaireFormationAggregateArgs>): Prisma.PrismaPromise<GetCommentaireFormationAggregateType<T>>

    /**
     * Group by CommentaireFormation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFormationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentaireFormationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentaireFormationGroupByArgs['orderBy'] }
        : { orderBy?: CommentaireFormationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentaireFormationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentaireFormationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommentaireFormation model
   */
  readonly fields: CommentaireFormationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommentaireFormation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentaireFormationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    formation<T extends ContentFormationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentFormationDefaultArgs<ExtArgs>>): Prisma__ContentFormationClient<$Result.GetResult<Prisma.$ContentFormationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CommentaireFormation model
   */ 
  interface CommentaireFormationFieldRefs {
    readonly id: FieldRef<"CommentaireFormation", 'Int'>
    readonly contenu: FieldRef<"CommentaireFormation", 'String'>
    readonly auteur: FieldRef<"CommentaireFormation", 'String'>
    readonly date: FieldRef<"CommentaireFormation", 'DateTime'>
    readonly formationId: FieldRef<"CommentaireFormation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CommentaireFormation findUnique
   */
  export type CommentaireFormationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * Filter, which CommentaireFormation to fetch.
     */
    where: CommentaireFormationWhereUniqueInput
  }


  /**
   * CommentaireFormation findUniqueOrThrow
   */
  export type CommentaireFormationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * Filter, which CommentaireFormation to fetch.
     */
    where: CommentaireFormationWhereUniqueInput
  }


  /**
   * CommentaireFormation findFirst
   */
  export type CommentaireFormationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * Filter, which CommentaireFormation to fetch.
     */
    where?: CommentaireFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentaireFormations to fetch.
     */
    orderBy?: CommentaireFormationOrderByWithRelationInput | CommentaireFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentaireFormations.
     */
    cursor?: CommentaireFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentaireFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentaireFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentaireFormations.
     */
    distinct?: CommentaireFormationScalarFieldEnum | CommentaireFormationScalarFieldEnum[]
  }


  /**
   * CommentaireFormation findFirstOrThrow
   */
  export type CommentaireFormationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * Filter, which CommentaireFormation to fetch.
     */
    where?: CommentaireFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentaireFormations to fetch.
     */
    orderBy?: CommentaireFormationOrderByWithRelationInput | CommentaireFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentaireFormations.
     */
    cursor?: CommentaireFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentaireFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentaireFormations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentaireFormations.
     */
    distinct?: CommentaireFormationScalarFieldEnum | CommentaireFormationScalarFieldEnum[]
  }


  /**
   * CommentaireFormation findMany
   */
  export type CommentaireFormationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * Filter, which CommentaireFormations to fetch.
     */
    where?: CommentaireFormationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentaireFormations to fetch.
     */
    orderBy?: CommentaireFormationOrderByWithRelationInput | CommentaireFormationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommentaireFormations.
     */
    cursor?: CommentaireFormationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentaireFormations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentaireFormations.
     */
    skip?: number
    distinct?: CommentaireFormationScalarFieldEnum | CommentaireFormationScalarFieldEnum[]
  }


  /**
   * CommentaireFormation create
   */
  export type CommentaireFormationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * The data needed to create a CommentaireFormation.
     */
    data: XOR<CommentaireFormationCreateInput, CommentaireFormationUncheckedCreateInput>
  }


  /**
   * CommentaireFormation update
   */
  export type CommentaireFormationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * The data needed to update a CommentaireFormation.
     */
    data: XOR<CommentaireFormationUpdateInput, CommentaireFormationUncheckedUpdateInput>
    /**
     * Choose, which CommentaireFormation to update.
     */
    where: CommentaireFormationWhereUniqueInput
  }


  /**
   * CommentaireFormation updateMany
   */
  export type CommentaireFormationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommentaireFormations.
     */
    data: XOR<CommentaireFormationUpdateManyMutationInput, CommentaireFormationUncheckedUpdateManyInput>
    /**
     * Filter which CommentaireFormations to update
     */
    where?: CommentaireFormationWhereInput
  }


  /**
   * CommentaireFormation upsert
   */
  export type CommentaireFormationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * The filter to search for the CommentaireFormation to update in case it exists.
     */
    where: CommentaireFormationWhereUniqueInput
    /**
     * In case the CommentaireFormation found by the `where` argument doesn't exist, create a new CommentaireFormation with this data.
     */
    create: XOR<CommentaireFormationCreateInput, CommentaireFormationUncheckedCreateInput>
    /**
     * In case the CommentaireFormation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentaireFormationUpdateInput, CommentaireFormationUncheckedUpdateInput>
  }


  /**
   * CommentaireFormation delete
   */
  export type CommentaireFormationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
    /**
     * Filter which CommentaireFormation to delete.
     */
    where: CommentaireFormationWhereUniqueInput
  }


  /**
   * CommentaireFormation deleteMany
   */
  export type CommentaireFormationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentaireFormations to delete
     */
    where?: CommentaireFormationWhereInput
  }


  /**
   * CommentaireFormation without action
   */
  export type CommentaireFormationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentaireFormation
     */
    select?: CommentaireFormationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireFormationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RegistrationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    func: 'func',
    password: 'password'
  };

  export type RegistrationScalarFieldEnum = (typeof RegistrationScalarFieldEnum)[keyof typeof RegistrationScalarFieldEnum]


  export const NewsletterScalarFieldEnum: {
    id: 'id',
    email: 'email'
  };

  export type NewsletterScalarFieldEnum = (typeof NewsletterScalarFieldEnum)[keyof typeof NewsletterScalarFieldEnum]


  export const BlogScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    imagePath: 'imagePath'
  };

  export type BlogScalarFieldEnum = (typeof BlogScalarFieldEnum)[keyof typeof BlogScalarFieldEnum]


  export const ProjetScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    imagePath: 'imagePath'
  };

  export type ProjetScalarFieldEnum = (typeof ProjetScalarFieldEnum)[keyof typeof ProjetScalarFieldEnum]


  export const OffreScalarFieldEnum: {
    id: 'id',
    type: 'type',
    description: 'description',
    imagePath: 'imagePath',
    fonc: 'fonc',
    date: 'date'
  };

  export type OffreScalarFieldEnum = (typeof OffreScalarFieldEnum)[keyof typeof OffreScalarFieldEnum]


  export const ConferenceScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    imagePath: 'imagePath',
    lien: 'lien',
    lieu: 'lieu',
    date: 'date'
  };

  export type ConferenceScalarFieldEnum = (typeof ConferenceScalarFieldEnum)[keyof typeof ConferenceScalarFieldEnum]


  export const ThemeFormationScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description'
  };

  export type ThemeFormationScalarFieldEnum = (typeof ThemeFormationScalarFieldEnum)[keyof typeof ThemeFormationScalarFieldEnum]


  export const ContentFormationScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    path: 'path',
    themeFormationId: 'themeFormationId'
  };

  export type ContentFormationScalarFieldEnum = (typeof ContentFormationScalarFieldEnum)[keyof typeof ContentFormationScalarFieldEnum]


  export const CommentaireFormationScalarFieldEnum: {
    id: 'id',
    contenu: 'contenu',
    auteur: 'auteur',
    date: 'date',
    formationId: 'formationId'
  };

  export type CommentaireFormationScalarFieldEnum = (typeof CommentaireFormationScalarFieldEnum)[keyof typeof CommentaireFormationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type RegistrationWhereInput = {
    AND?: RegistrationWhereInput | RegistrationWhereInput[]
    OR?: RegistrationWhereInput[]
    NOT?: RegistrationWhereInput | RegistrationWhereInput[]
    id?: IntFilter<"Registration"> | number
    name?: StringFilter<"Registration"> | string
    email?: StringFilter<"Registration"> | string
    func?: StringFilter<"Registration"> | string
    password?: StringFilter<"Registration"> | string
  }

  export type RegistrationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    func?: SortOrder
    password?: SortOrder
  }

  export type RegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: RegistrationWhereInput | RegistrationWhereInput[]
    OR?: RegistrationWhereInput[]
    NOT?: RegistrationWhereInput | RegistrationWhereInput[]
    name?: StringFilter<"Registration"> | string
    func?: StringFilter<"Registration"> | string
    password?: StringFilter<"Registration"> | string
  }, "id" | "email">

  export type RegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    func?: SortOrder
    password?: SortOrder
    _count?: RegistrationCountOrderByAggregateInput
    _avg?: RegistrationAvgOrderByAggregateInput
    _max?: RegistrationMaxOrderByAggregateInput
    _min?: RegistrationMinOrderByAggregateInput
    _sum?: RegistrationSumOrderByAggregateInput
  }

  export type RegistrationScalarWhereWithAggregatesInput = {
    AND?: RegistrationScalarWhereWithAggregatesInput | RegistrationScalarWhereWithAggregatesInput[]
    OR?: RegistrationScalarWhereWithAggregatesInput[]
    NOT?: RegistrationScalarWhereWithAggregatesInput | RegistrationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Registration"> | number
    name?: StringWithAggregatesFilter<"Registration"> | string
    email?: StringWithAggregatesFilter<"Registration"> | string
    func?: StringWithAggregatesFilter<"Registration"> | string
    password?: StringWithAggregatesFilter<"Registration"> | string
  }

  export type NewsletterWhereInput = {
    AND?: NewsletterWhereInput | NewsletterWhereInput[]
    OR?: NewsletterWhereInput[]
    NOT?: NewsletterWhereInput | NewsletterWhereInput[]
    id?: IntFilter<"Newsletter"> | number
    email?: StringFilter<"Newsletter"> | string
  }

  export type NewsletterOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: NewsletterWhereInput | NewsletterWhereInput[]
    OR?: NewsletterWhereInput[]
    NOT?: NewsletterWhereInput | NewsletterWhereInput[]
  }, "id" | "email">

  export type NewsletterOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    _count?: NewsletterCountOrderByAggregateInput
    _avg?: NewsletterAvgOrderByAggregateInput
    _max?: NewsletterMaxOrderByAggregateInput
    _min?: NewsletterMinOrderByAggregateInput
    _sum?: NewsletterSumOrderByAggregateInput
  }

  export type NewsletterScalarWhereWithAggregatesInput = {
    AND?: NewsletterScalarWhereWithAggregatesInput | NewsletterScalarWhereWithAggregatesInput[]
    OR?: NewsletterScalarWhereWithAggregatesInput[]
    NOT?: NewsletterScalarWhereWithAggregatesInput | NewsletterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Newsletter"> | number
    email?: StringWithAggregatesFilter<"Newsletter"> | string
  }

  export type BlogWhereInput = {
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    id?: IntFilter<"Blog"> | number
    titre?: StringFilter<"Blog"> | string
    description?: StringFilter<"Blog"> | string
    imagePath?: StringFilter<"Blog"> | string
  }

  export type BlogOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type BlogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BlogWhereInput | BlogWhereInput[]
    OR?: BlogWhereInput[]
    NOT?: BlogWhereInput | BlogWhereInput[]
    titre?: StringFilter<"Blog"> | string
    description?: StringFilter<"Blog"> | string
    imagePath?: StringFilter<"Blog"> | string
  }, "id">

  export type BlogOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    _count?: BlogCountOrderByAggregateInput
    _avg?: BlogAvgOrderByAggregateInput
    _max?: BlogMaxOrderByAggregateInput
    _min?: BlogMinOrderByAggregateInput
    _sum?: BlogSumOrderByAggregateInput
  }

  export type BlogScalarWhereWithAggregatesInput = {
    AND?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    OR?: BlogScalarWhereWithAggregatesInput[]
    NOT?: BlogScalarWhereWithAggregatesInput | BlogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Blog"> | number
    titre?: StringWithAggregatesFilter<"Blog"> | string
    description?: StringWithAggregatesFilter<"Blog"> | string
    imagePath?: StringWithAggregatesFilter<"Blog"> | string
  }

  export type ProjetWhereInput = {
    AND?: ProjetWhereInput | ProjetWhereInput[]
    OR?: ProjetWhereInput[]
    NOT?: ProjetWhereInput | ProjetWhereInput[]
    id?: IntFilter<"Projet"> | number
    titre?: StringFilter<"Projet"> | string
    description?: StringFilter<"Projet"> | string
    imagePath?: StringFilter<"Projet"> | string
  }

  export type ProjetOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type ProjetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProjetWhereInput | ProjetWhereInput[]
    OR?: ProjetWhereInput[]
    NOT?: ProjetWhereInput | ProjetWhereInput[]
    titre?: StringFilter<"Projet"> | string
    description?: StringFilter<"Projet"> | string
    imagePath?: StringFilter<"Projet"> | string
  }, "id">

  export type ProjetOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    _count?: ProjetCountOrderByAggregateInput
    _avg?: ProjetAvgOrderByAggregateInput
    _max?: ProjetMaxOrderByAggregateInput
    _min?: ProjetMinOrderByAggregateInput
    _sum?: ProjetSumOrderByAggregateInput
  }

  export type ProjetScalarWhereWithAggregatesInput = {
    AND?: ProjetScalarWhereWithAggregatesInput | ProjetScalarWhereWithAggregatesInput[]
    OR?: ProjetScalarWhereWithAggregatesInput[]
    NOT?: ProjetScalarWhereWithAggregatesInput | ProjetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Projet"> | number
    titre?: StringWithAggregatesFilter<"Projet"> | string
    description?: StringWithAggregatesFilter<"Projet"> | string
    imagePath?: StringWithAggregatesFilter<"Projet"> | string
  }

  export type OffreWhereInput = {
    AND?: OffreWhereInput | OffreWhereInput[]
    OR?: OffreWhereInput[]
    NOT?: OffreWhereInput | OffreWhereInput[]
    id?: IntFilter<"Offre"> | number
    type?: StringFilter<"Offre"> | string
    description?: StringFilter<"Offre"> | string
    imagePath?: StringFilter<"Offre"> | string
    fonc?: StringFilter<"Offre"> | string
    date?: DateTimeFilter<"Offre"> | Date | string
  }

  export type OffreOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    fonc?: SortOrder
    date?: SortOrder
  }

  export type OffreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OffreWhereInput | OffreWhereInput[]
    OR?: OffreWhereInput[]
    NOT?: OffreWhereInput | OffreWhereInput[]
    type?: StringFilter<"Offre"> | string
    description?: StringFilter<"Offre"> | string
    imagePath?: StringFilter<"Offre"> | string
    fonc?: StringFilter<"Offre"> | string
    date?: DateTimeFilter<"Offre"> | Date | string
  }, "id">

  export type OffreOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    fonc?: SortOrder
    date?: SortOrder
    _count?: OffreCountOrderByAggregateInput
    _avg?: OffreAvgOrderByAggregateInput
    _max?: OffreMaxOrderByAggregateInput
    _min?: OffreMinOrderByAggregateInput
    _sum?: OffreSumOrderByAggregateInput
  }

  export type OffreScalarWhereWithAggregatesInput = {
    AND?: OffreScalarWhereWithAggregatesInput | OffreScalarWhereWithAggregatesInput[]
    OR?: OffreScalarWhereWithAggregatesInput[]
    NOT?: OffreScalarWhereWithAggregatesInput | OffreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Offre"> | number
    type?: StringWithAggregatesFilter<"Offre"> | string
    description?: StringWithAggregatesFilter<"Offre"> | string
    imagePath?: StringWithAggregatesFilter<"Offre"> | string
    fonc?: StringWithAggregatesFilter<"Offre"> | string
    date?: DateTimeWithAggregatesFilter<"Offre"> | Date | string
  }

  export type ConferenceWhereInput = {
    AND?: ConferenceWhereInput | ConferenceWhereInput[]
    OR?: ConferenceWhereInput[]
    NOT?: ConferenceWhereInput | ConferenceWhereInput[]
    id?: IntFilter<"Conference"> | number
    titre?: StringFilter<"Conference"> | string
    description?: StringFilter<"Conference"> | string
    imagePath?: StringFilter<"Conference"> | string
    lien?: StringFilter<"Conference"> | string
    lieu?: StringFilter<"Conference"> | string
    date?: DateTimeFilter<"Conference"> | Date | string
  }

  export type ConferenceOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    lien?: SortOrder
    lieu?: SortOrder
    date?: SortOrder
  }

  export type ConferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConferenceWhereInput | ConferenceWhereInput[]
    OR?: ConferenceWhereInput[]
    NOT?: ConferenceWhereInput | ConferenceWhereInput[]
    titre?: StringFilter<"Conference"> | string
    description?: StringFilter<"Conference"> | string
    imagePath?: StringFilter<"Conference"> | string
    lien?: StringFilter<"Conference"> | string
    lieu?: StringFilter<"Conference"> | string
    date?: DateTimeFilter<"Conference"> | Date | string
  }, "id">

  export type ConferenceOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    lien?: SortOrder
    lieu?: SortOrder
    date?: SortOrder
    _count?: ConferenceCountOrderByAggregateInput
    _avg?: ConferenceAvgOrderByAggregateInput
    _max?: ConferenceMaxOrderByAggregateInput
    _min?: ConferenceMinOrderByAggregateInput
    _sum?: ConferenceSumOrderByAggregateInput
  }

  export type ConferenceScalarWhereWithAggregatesInput = {
    AND?: ConferenceScalarWhereWithAggregatesInput | ConferenceScalarWhereWithAggregatesInput[]
    OR?: ConferenceScalarWhereWithAggregatesInput[]
    NOT?: ConferenceScalarWhereWithAggregatesInput | ConferenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Conference"> | number
    titre?: StringWithAggregatesFilter<"Conference"> | string
    description?: StringWithAggregatesFilter<"Conference"> | string
    imagePath?: StringWithAggregatesFilter<"Conference"> | string
    lien?: StringWithAggregatesFilter<"Conference"> | string
    lieu?: StringWithAggregatesFilter<"Conference"> | string
    date?: DateTimeWithAggregatesFilter<"Conference"> | Date | string
  }

  export type ThemeFormationWhereInput = {
    AND?: ThemeFormationWhereInput | ThemeFormationWhereInput[]
    OR?: ThemeFormationWhereInput[]
    NOT?: ThemeFormationWhereInput | ThemeFormationWhereInput[]
    id?: IntFilter<"ThemeFormation"> | number
    titre?: StringFilter<"ThemeFormation"> | string
    description?: StringFilter<"ThemeFormation"> | string
    contentFormations?: ContentFormationListRelationFilter
  }

  export type ThemeFormationOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    contentFormations?: ContentFormationOrderByRelationAggregateInput
  }

  export type ThemeFormationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThemeFormationWhereInput | ThemeFormationWhereInput[]
    OR?: ThemeFormationWhereInput[]
    NOT?: ThemeFormationWhereInput | ThemeFormationWhereInput[]
    titre?: StringFilter<"ThemeFormation"> | string
    description?: StringFilter<"ThemeFormation"> | string
    contentFormations?: ContentFormationListRelationFilter
  }, "id">

  export type ThemeFormationOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    _count?: ThemeFormationCountOrderByAggregateInput
    _avg?: ThemeFormationAvgOrderByAggregateInput
    _max?: ThemeFormationMaxOrderByAggregateInput
    _min?: ThemeFormationMinOrderByAggregateInput
    _sum?: ThemeFormationSumOrderByAggregateInput
  }

  export type ThemeFormationScalarWhereWithAggregatesInput = {
    AND?: ThemeFormationScalarWhereWithAggregatesInput | ThemeFormationScalarWhereWithAggregatesInput[]
    OR?: ThemeFormationScalarWhereWithAggregatesInput[]
    NOT?: ThemeFormationScalarWhereWithAggregatesInput | ThemeFormationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ThemeFormation"> | number
    titre?: StringWithAggregatesFilter<"ThemeFormation"> | string
    description?: StringWithAggregatesFilter<"ThemeFormation"> | string
  }

  export type ContentFormationWhereInput = {
    AND?: ContentFormationWhereInput | ContentFormationWhereInput[]
    OR?: ContentFormationWhereInput[]
    NOT?: ContentFormationWhereInput | ContentFormationWhereInput[]
    id?: IntFilter<"ContentFormation"> | number
    titre?: StringFilter<"ContentFormation"> | string
    description?: StringFilter<"ContentFormation"> | string
    path?: StringFilter<"ContentFormation"> | string
    themeFormationId?: IntFilter<"ContentFormation"> | number
    themeFormation?: XOR<ThemeFormationRelationFilter, ThemeFormationWhereInput>
    commentaires?: CommentaireFormationListRelationFilter
  }

  export type ContentFormationOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    path?: SortOrder
    themeFormationId?: SortOrder
    themeFormation?: ThemeFormationOrderByWithRelationInput
    commentaires?: CommentaireFormationOrderByRelationAggregateInput
  }

  export type ContentFormationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContentFormationWhereInput | ContentFormationWhereInput[]
    OR?: ContentFormationWhereInput[]
    NOT?: ContentFormationWhereInput | ContentFormationWhereInput[]
    titre?: StringFilter<"ContentFormation"> | string
    description?: StringFilter<"ContentFormation"> | string
    path?: StringFilter<"ContentFormation"> | string
    themeFormationId?: IntFilter<"ContentFormation"> | number
    themeFormation?: XOR<ThemeFormationRelationFilter, ThemeFormationWhereInput>
    commentaires?: CommentaireFormationListRelationFilter
  }, "id">

  export type ContentFormationOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    path?: SortOrder
    themeFormationId?: SortOrder
    _count?: ContentFormationCountOrderByAggregateInput
    _avg?: ContentFormationAvgOrderByAggregateInput
    _max?: ContentFormationMaxOrderByAggregateInput
    _min?: ContentFormationMinOrderByAggregateInput
    _sum?: ContentFormationSumOrderByAggregateInput
  }

  export type ContentFormationScalarWhereWithAggregatesInput = {
    AND?: ContentFormationScalarWhereWithAggregatesInput | ContentFormationScalarWhereWithAggregatesInput[]
    OR?: ContentFormationScalarWhereWithAggregatesInput[]
    NOT?: ContentFormationScalarWhereWithAggregatesInput | ContentFormationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContentFormation"> | number
    titre?: StringWithAggregatesFilter<"ContentFormation"> | string
    description?: StringWithAggregatesFilter<"ContentFormation"> | string
    path?: StringWithAggregatesFilter<"ContentFormation"> | string
    themeFormationId?: IntWithAggregatesFilter<"ContentFormation"> | number
  }

  export type CommentaireFormationWhereInput = {
    AND?: CommentaireFormationWhereInput | CommentaireFormationWhereInput[]
    OR?: CommentaireFormationWhereInput[]
    NOT?: CommentaireFormationWhereInput | CommentaireFormationWhereInput[]
    id?: IntFilter<"CommentaireFormation"> | number
    contenu?: StringFilter<"CommentaireFormation"> | string
    auteur?: StringFilter<"CommentaireFormation"> | string
    date?: DateTimeFilter<"CommentaireFormation"> | Date | string
    formationId?: IntFilter<"CommentaireFormation"> | number
    formation?: XOR<ContentFormationRelationFilter, ContentFormationWhereInput>
  }

  export type CommentaireFormationOrderByWithRelationInput = {
    id?: SortOrder
    contenu?: SortOrder
    auteur?: SortOrder
    date?: SortOrder
    formationId?: SortOrder
    formation?: ContentFormationOrderByWithRelationInput
  }

  export type CommentaireFormationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentaireFormationWhereInput | CommentaireFormationWhereInput[]
    OR?: CommentaireFormationWhereInput[]
    NOT?: CommentaireFormationWhereInput | CommentaireFormationWhereInput[]
    contenu?: StringFilter<"CommentaireFormation"> | string
    auteur?: StringFilter<"CommentaireFormation"> | string
    date?: DateTimeFilter<"CommentaireFormation"> | Date | string
    formationId?: IntFilter<"CommentaireFormation"> | number
    formation?: XOR<ContentFormationRelationFilter, ContentFormationWhereInput>
  }, "id">

  export type CommentaireFormationOrderByWithAggregationInput = {
    id?: SortOrder
    contenu?: SortOrder
    auteur?: SortOrder
    date?: SortOrder
    formationId?: SortOrder
    _count?: CommentaireFormationCountOrderByAggregateInput
    _avg?: CommentaireFormationAvgOrderByAggregateInput
    _max?: CommentaireFormationMaxOrderByAggregateInput
    _min?: CommentaireFormationMinOrderByAggregateInput
    _sum?: CommentaireFormationSumOrderByAggregateInput
  }

  export type CommentaireFormationScalarWhereWithAggregatesInput = {
    AND?: CommentaireFormationScalarWhereWithAggregatesInput | CommentaireFormationScalarWhereWithAggregatesInput[]
    OR?: CommentaireFormationScalarWhereWithAggregatesInput[]
    NOT?: CommentaireFormationScalarWhereWithAggregatesInput | CommentaireFormationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommentaireFormation"> | number
    contenu?: StringWithAggregatesFilter<"CommentaireFormation"> | string
    auteur?: StringWithAggregatesFilter<"CommentaireFormation"> | string
    date?: DateTimeWithAggregatesFilter<"CommentaireFormation"> | Date | string
    formationId?: IntWithAggregatesFilter<"CommentaireFormation"> | number
  }

  export type RegistrationCreateInput = {
    name: string
    email: string
    func: string
    password: string
  }

  export type RegistrationUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    func: string
    password: string
  }

  export type RegistrationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    func?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RegistrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    func?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RegistrationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    func?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RegistrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    func?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterCreateInput = {
    email: string
  }

  export type NewsletterUncheckedCreateInput = {
    id?: number
    email: string
  }

  export type NewsletterUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type NewsletterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
  }

  export type BlogCreateInput = {
    titre: string
    description: string
    imagePath: string
  }

  export type BlogUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    imagePath: string
  }

  export type BlogUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type BlogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetCreateInput = {
    titre: string
    description: string
    imagePath: string
  }

  export type ProjetUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    imagePath: string
  }

  export type ProjetUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
  }

  export type OffreCreateInput = {
    type: string
    description: string
    imagePath?: string
    fonc?: string
    date?: Date | string
  }

  export type OffreUncheckedCreateInput = {
    id?: number
    type: string
    description: string
    imagePath?: string
    fonc?: string
    date?: Date | string
  }

  export type OffreUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    fonc?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OffreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    fonc?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OffreUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    fonc?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OffreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    fonc?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceCreateInput = {
    titre: string
    description: string
    imagePath: string
    lien: string
    lieu?: string
    date?: Date | string
  }

  export type ConferenceUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    imagePath: string
    lien: string
    lieu?: string
    date?: Date | string
  }

  export type ConferenceUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    lien?: StringFieldUpdateOperationsInput | string
    lieu?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    lien?: StringFieldUpdateOperationsInput | string
    lieu?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    lien?: StringFieldUpdateOperationsInput | string
    lieu?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    lien?: StringFieldUpdateOperationsInput | string
    lieu?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeFormationCreateInput = {
    titre: string
    description: string
    contentFormations?: ContentFormationCreateNestedManyWithoutThemeFormationInput
  }

  export type ThemeFormationUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    contentFormations?: ContentFormationUncheckedCreateNestedManyWithoutThemeFormationInput
  }

  export type ThemeFormationUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contentFormations?: ContentFormationUpdateManyWithoutThemeFormationNestedInput
  }

  export type ThemeFormationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contentFormations?: ContentFormationUncheckedUpdateManyWithoutThemeFormationNestedInput
  }

  export type ThemeFormationUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeFormationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ContentFormationCreateInput = {
    titre: string
    description: string
    path: string
    themeFormation: ThemeFormationCreateNestedOneWithoutContentFormationsInput
    commentaires?: CommentaireFormationCreateNestedManyWithoutFormationInput
  }

  export type ContentFormationUncheckedCreateInput = {
    id?: number
    titre: string
    description: string
    path: string
    themeFormationId: number
    commentaires?: CommentaireFormationUncheckedCreateNestedManyWithoutFormationInput
  }

  export type ContentFormationUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    themeFormation?: ThemeFormationUpdateOneRequiredWithoutContentFormationsNestedInput
    commentaires?: CommentaireFormationUpdateManyWithoutFormationNestedInput
  }

  export type ContentFormationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    themeFormationId?: IntFieldUpdateOperationsInput | number
    commentaires?: CommentaireFormationUncheckedUpdateManyWithoutFormationNestedInput
  }

  export type ContentFormationUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ContentFormationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    themeFormationId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentaireFormationCreateInput = {
    contenu: string
    auteur: string
    date: Date | string
    formation: ContentFormationCreateNestedOneWithoutCommentairesInput
  }

  export type CommentaireFormationUncheckedCreateInput = {
    id?: number
    contenu: string
    auteur: string
    date: Date | string
    formationId: number
  }

  export type CommentaireFormationUpdateInput = {
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    formation?: ContentFormationUpdateOneRequiredWithoutCommentairesNestedInput
  }

  export type CommentaireFormationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    formationId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentaireFormationUpdateManyMutationInput = {
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentaireFormationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    formationId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    func?: SortOrder
    password?: SortOrder
  }

  export type RegistrationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    func?: SortOrder
    password?: SortOrder
  }

  export type RegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    func?: SortOrder
    password?: SortOrder
  }

  export type RegistrationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NewsletterCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsletterMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type NewsletterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BlogCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type BlogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BlogMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type BlogMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type BlogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjetCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type ProjetAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjetMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type ProjetMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
  }

  export type ProjetSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OffreCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    fonc?: SortOrder
    date?: SortOrder
  }

  export type OffreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OffreMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    fonc?: SortOrder
    date?: SortOrder
  }

  export type OffreMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    fonc?: SortOrder
    date?: SortOrder
  }

  export type OffreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ConferenceCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    lien?: SortOrder
    lieu?: SortOrder
    date?: SortOrder
  }

  export type ConferenceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ConferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    lien?: SortOrder
    lieu?: SortOrder
    date?: SortOrder
  }

  export type ConferenceMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    imagePath?: SortOrder
    lien?: SortOrder
    lieu?: SortOrder
    date?: SortOrder
  }

  export type ConferenceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContentFormationListRelationFilter = {
    every?: ContentFormationWhereInput
    some?: ContentFormationWhereInput
    none?: ContentFormationWhereInput
  }

  export type ContentFormationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThemeFormationCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
  }

  export type ThemeFormationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThemeFormationMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
  }

  export type ThemeFormationMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
  }

  export type ThemeFormationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThemeFormationRelationFilter = {
    is?: ThemeFormationWhereInput
    isNot?: ThemeFormationWhereInput
  }

  export type CommentaireFormationListRelationFilter = {
    every?: CommentaireFormationWhereInput
    some?: CommentaireFormationWhereInput
    none?: CommentaireFormationWhereInput
  }

  export type CommentaireFormationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentFormationCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    path?: SortOrder
    themeFormationId?: SortOrder
  }

  export type ContentFormationAvgOrderByAggregateInput = {
    id?: SortOrder
    themeFormationId?: SortOrder
  }

  export type ContentFormationMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    path?: SortOrder
    themeFormationId?: SortOrder
  }

  export type ContentFormationMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    path?: SortOrder
    themeFormationId?: SortOrder
  }

  export type ContentFormationSumOrderByAggregateInput = {
    id?: SortOrder
    themeFormationId?: SortOrder
  }

  export type ContentFormationRelationFilter = {
    is?: ContentFormationWhereInput
    isNot?: ContentFormationWhereInput
  }

  export type CommentaireFormationCountOrderByAggregateInput = {
    id?: SortOrder
    contenu?: SortOrder
    auteur?: SortOrder
    date?: SortOrder
    formationId?: SortOrder
  }

  export type CommentaireFormationAvgOrderByAggregateInput = {
    id?: SortOrder
    formationId?: SortOrder
  }

  export type CommentaireFormationMaxOrderByAggregateInput = {
    id?: SortOrder
    contenu?: SortOrder
    auteur?: SortOrder
    date?: SortOrder
    formationId?: SortOrder
  }

  export type CommentaireFormationMinOrderByAggregateInput = {
    id?: SortOrder
    contenu?: SortOrder
    auteur?: SortOrder
    date?: SortOrder
    formationId?: SortOrder
  }

  export type CommentaireFormationSumOrderByAggregateInput = {
    id?: SortOrder
    formationId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ContentFormationCreateNestedManyWithoutThemeFormationInput = {
    create?: XOR<ContentFormationCreateWithoutThemeFormationInput, ContentFormationUncheckedCreateWithoutThemeFormationInput> | ContentFormationCreateWithoutThemeFormationInput[] | ContentFormationUncheckedCreateWithoutThemeFormationInput[]
    connectOrCreate?: ContentFormationCreateOrConnectWithoutThemeFormationInput | ContentFormationCreateOrConnectWithoutThemeFormationInput[]
    connect?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
  }

  export type ContentFormationUncheckedCreateNestedManyWithoutThemeFormationInput = {
    create?: XOR<ContentFormationCreateWithoutThemeFormationInput, ContentFormationUncheckedCreateWithoutThemeFormationInput> | ContentFormationCreateWithoutThemeFormationInput[] | ContentFormationUncheckedCreateWithoutThemeFormationInput[]
    connectOrCreate?: ContentFormationCreateOrConnectWithoutThemeFormationInput | ContentFormationCreateOrConnectWithoutThemeFormationInput[]
    connect?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
  }

  export type ContentFormationUpdateManyWithoutThemeFormationNestedInput = {
    create?: XOR<ContentFormationCreateWithoutThemeFormationInput, ContentFormationUncheckedCreateWithoutThemeFormationInput> | ContentFormationCreateWithoutThemeFormationInput[] | ContentFormationUncheckedCreateWithoutThemeFormationInput[]
    connectOrCreate?: ContentFormationCreateOrConnectWithoutThemeFormationInput | ContentFormationCreateOrConnectWithoutThemeFormationInput[]
    upsert?: ContentFormationUpsertWithWhereUniqueWithoutThemeFormationInput | ContentFormationUpsertWithWhereUniqueWithoutThemeFormationInput[]
    set?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    disconnect?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    delete?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    connect?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    update?: ContentFormationUpdateWithWhereUniqueWithoutThemeFormationInput | ContentFormationUpdateWithWhereUniqueWithoutThemeFormationInput[]
    updateMany?: ContentFormationUpdateManyWithWhereWithoutThemeFormationInput | ContentFormationUpdateManyWithWhereWithoutThemeFormationInput[]
    deleteMany?: ContentFormationScalarWhereInput | ContentFormationScalarWhereInput[]
  }

  export type ContentFormationUncheckedUpdateManyWithoutThemeFormationNestedInput = {
    create?: XOR<ContentFormationCreateWithoutThemeFormationInput, ContentFormationUncheckedCreateWithoutThemeFormationInput> | ContentFormationCreateWithoutThemeFormationInput[] | ContentFormationUncheckedCreateWithoutThemeFormationInput[]
    connectOrCreate?: ContentFormationCreateOrConnectWithoutThemeFormationInput | ContentFormationCreateOrConnectWithoutThemeFormationInput[]
    upsert?: ContentFormationUpsertWithWhereUniqueWithoutThemeFormationInput | ContentFormationUpsertWithWhereUniqueWithoutThemeFormationInput[]
    set?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    disconnect?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    delete?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    connect?: ContentFormationWhereUniqueInput | ContentFormationWhereUniqueInput[]
    update?: ContentFormationUpdateWithWhereUniqueWithoutThemeFormationInput | ContentFormationUpdateWithWhereUniqueWithoutThemeFormationInput[]
    updateMany?: ContentFormationUpdateManyWithWhereWithoutThemeFormationInput | ContentFormationUpdateManyWithWhereWithoutThemeFormationInput[]
    deleteMany?: ContentFormationScalarWhereInput | ContentFormationScalarWhereInput[]
  }

  export type ThemeFormationCreateNestedOneWithoutContentFormationsInput = {
    create?: XOR<ThemeFormationCreateWithoutContentFormationsInput, ThemeFormationUncheckedCreateWithoutContentFormationsInput>
    connectOrCreate?: ThemeFormationCreateOrConnectWithoutContentFormationsInput
    connect?: ThemeFormationWhereUniqueInput
  }

  export type CommentaireFormationCreateNestedManyWithoutFormationInput = {
    create?: XOR<CommentaireFormationCreateWithoutFormationInput, CommentaireFormationUncheckedCreateWithoutFormationInput> | CommentaireFormationCreateWithoutFormationInput[] | CommentaireFormationUncheckedCreateWithoutFormationInput[]
    connectOrCreate?: CommentaireFormationCreateOrConnectWithoutFormationInput | CommentaireFormationCreateOrConnectWithoutFormationInput[]
    connect?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
  }

  export type CommentaireFormationUncheckedCreateNestedManyWithoutFormationInput = {
    create?: XOR<CommentaireFormationCreateWithoutFormationInput, CommentaireFormationUncheckedCreateWithoutFormationInput> | CommentaireFormationCreateWithoutFormationInput[] | CommentaireFormationUncheckedCreateWithoutFormationInput[]
    connectOrCreate?: CommentaireFormationCreateOrConnectWithoutFormationInput | CommentaireFormationCreateOrConnectWithoutFormationInput[]
    connect?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
  }

  export type ThemeFormationUpdateOneRequiredWithoutContentFormationsNestedInput = {
    create?: XOR<ThemeFormationCreateWithoutContentFormationsInput, ThemeFormationUncheckedCreateWithoutContentFormationsInput>
    connectOrCreate?: ThemeFormationCreateOrConnectWithoutContentFormationsInput
    upsert?: ThemeFormationUpsertWithoutContentFormationsInput
    connect?: ThemeFormationWhereUniqueInput
    update?: XOR<XOR<ThemeFormationUpdateToOneWithWhereWithoutContentFormationsInput, ThemeFormationUpdateWithoutContentFormationsInput>, ThemeFormationUncheckedUpdateWithoutContentFormationsInput>
  }

  export type CommentaireFormationUpdateManyWithoutFormationNestedInput = {
    create?: XOR<CommentaireFormationCreateWithoutFormationInput, CommentaireFormationUncheckedCreateWithoutFormationInput> | CommentaireFormationCreateWithoutFormationInput[] | CommentaireFormationUncheckedCreateWithoutFormationInput[]
    connectOrCreate?: CommentaireFormationCreateOrConnectWithoutFormationInput | CommentaireFormationCreateOrConnectWithoutFormationInput[]
    upsert?: CommentaireFormationUpsertWithWhereUniqueWithoutFormationInput | CommentaireFormationUpsertWithWhereUniqueWithoutFormationInput[]
    set?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    disconnect?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    delete?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    connect?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    update?: CommentaireFormationUpdateWithWhereUniqueWithoutFormationInput | CommentaireFormationUpdateWithWhereUniqueWithoutFormationInput[]
    updateMany?: CommentaireFormationUpdateManyWithWhereWithoutFormationInput | CommentaireFormationUpdateManyWithWhereWithoutFormationInput[]
    deleteMany?: CommentaireFormationScalarWhereInput | CommentaireFormationScalarWhereInput[]
  }

  export type CommentaireFormationUncheckedUpdateManyWithoutFormationNestedInput = {
    create?: XOR<CommentaireFormationCreateWithoutFormationInput, CommentaireFormationUncheckedCreateWithoutFormationInput> | CommentaireFormationCreateWithoutFormationInput[] | CommentaireFormationUncheckedCreateWithoutFormationInput[]
    connectOrCreate?: CommentaireFormationCreateOrConnectWithoutFormationInput | CommentaireFormationCreateOrConnectWithoutFormationInput[]
    upsert?: CommentaireFormationUpsertWithWhereUniqueWithoutFormationInput | CommentaireFormationUpsertWithWhereUniqueWithoutFormationInput[]
    set?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    disconnect?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    delete?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    connect?: CommentaireFormationWhereUniqueInput | CommentaireFormationWhereUniqueInput[]
    update?: CommentaireFormationUpdateWithWhereUniqueWithoutFormationInput | CommentaireFormationUpdateWithWhereUniqueWithoutFormationInput[]
    updateMany?: CommentaireFormationUpdateManyWithWhereWithoutFormationInput | CommentaireFormationUpdateManyWithWhereWithoutFormationInput[]
    deleteMany?: CommentaireFormationScalarWhereInput | CommentaireFormationScalarWhereInput[]
  }

  export type ContentFormationCreateNestedOneWithoutCommentairesInput = {
    create?: XOR<ContentFormationCreateWithoutCommentairesInput, ContentFormationUncheckedCreateWithoutCommentairesInput>
    connectOrCreate?: ContentFormationCreateOrConnectWithoutCommentairesInput
    connect?: ContentFormationWhereUniqueInput
  }

  export type ContentFormationUpdateOneRequiredWithoutCommentairesNestedInput = {
    create?: XOR<ContentFormationCreateWithoutCommentairesInput, ContentFormationUncheckedCreateWithoutCommentairesInput>
    connectOrCreate?: ContentFormationCreateOrConnectWithoutCommentairesInput
    upsert?: ContentFormationUpsertWithoutCommentairesInput
    connect?: ContentFormationWhereUniqueInput
    update?: XOR<XOR<ContentFormationUpdateToOneWithWhereWithoutCommentairesInput, ContentFormationUpdateWithoutCommentairesInput>, ContentFormationUncheckedUpdateWithoutCommentairesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ContentFormationCreateWithoutThemeFormationInput = {
    titre: string
    description: string
    path: string
    commentaires?: CommentaireFormationCreateNestedManyWithoutFormationInput
  }

  export type ContentFormationUncheckedCreateWithoutThemeFormationInput = {
    id?: number
    titre: string
    description: string
    path: string
    commentaires?: CommentaireFormationUncheckedCreateNestedManyWithoutFormationInput
  }

  export type ContentFormationCreateOrConnectWithoutThemeFormationInput = {
    where: ContentFormationWhereUniqueInput
    create: XOR<ContentFormationCreateWithoutThemeFormationInput, ContentFormationUncheckedCreateWithoutThemeFormationInput>
  }

  export type ContentFormationUpsertWithWhereUniqueWithoutThemeFormationInput = {
    where: ContentFormationWhereUniqueInput
    update: XOR<ContentFormationUpdateWithoutThemeFormationInput, ContentFormationUncheckedUpdateWithoutThemeFormationInput>
    create: XOR<ContentFormationCreateWithoutThemeFormationInput, ContentFormationUncheckedCreateWithoutThemeFormationInput>
  }

  export type ContentFormationUpdateWithWhereUniqueWithoutThemeFormationInput = {
    where: ContentFormationWhereUniqueInput
    data: XOR<ContentFormationUpdateWithoutThemeFormationInput, ContentFormationUncheckedUpdateWithoutThemeFormationInput>
  }

  export type ContentFormationUpdateManyWithWhereWithoutThemeFormationInput = {
    where: ContentFormationScalarWhereInput
    data: XOR<ContentFormationUpdateManyMutationInput, ContentFormationUncheckedUpdateManyWithoutThemeFormationInput>
  }

  export type ContentFormationScalarWhereInput = {
    AND?: ContentFormationScalarWhereInput | ContentFormationScalarWhereInput[]
    OR?: ContentFormationScalarWhereInput[]
    NOT?: ContentFormationScalarWhereInput | ContentFormationScalarWhereInput[]
    id?: IntFilter<"ContentFormation"> | number
    titre?: StringFilter<"ContentFormation"> | string
    description?: StringFilter<"ContentFormation"> | string
    path?: StringFilter<"ContentFormation"> | string
    themeFormationId?: IntFilter<"ContentFormation"> | number
  }

  export type ThemeFormationCreateWithoutContentFormationsInput = {
    titre: string
    description: string
  }

  export type ThemeFormationUncheckedCreateWithoutContentFormationsInput = {
    id?: number
    titre: string
    description: string
  }

  export type ThemeFormationCreateOrConnectWithoutContentFormationsInput = {
    where: ThemeFormationWhereUniqueInput
    create: XOR<ThemeFormationCreateWithoutContentFormationsInput, ThemeFormationUncheckedCreateWithoutContentFormationsInput>
  }

  export type CommentaireFormationCreateWithoutFormationInput = {
    contenu: string
    auteur: string
    date: Date | string
  }

  export type CommentaireFormationUncheckedCreateWithoutFormationInput = {
    id?: number
    contenu: string
    auteur: string
    date: Date | string
  }

  export type CommentaireFormationCreateOrConnectWithoutFormationInput = {
    where: CommentaireFormationWhereUniqueInput
    create: XOR<CommentaireFormationCreateWithoutFormationInput, CommentaireFormationUncheckedCreateWithoutFormationInput>
  }

  export type ThemeFormationUpsertWithoutContentFormationsInput = {
    update: XOR<ThemeFormationUpdateWithoutContentFormationsInput, ThemeFormationUncheckedUpdateWithoutContentFormationsInput>
    create: XOR<ThemeFormationCreateWithoutContentFormationsInput, ThemeFormationUncheckedCreateWithoutContentFormationsInput>
    where?: ThemeFormationWhereInput
  }

  export type ThemeFormationUpdateToOneWithWhereWithoutContentFormationsInput = {
    where?: ThemeFormationWhereInput
    data: XOR<ThemeFormationUpdateWithoutContentFormationsInput, ThemeFormationUncheckedUpdateWithoutContentFormationsInput>
  }

  export type ThemeFormationUpdateWithoutContentFormationsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeFormationUncheckedUpdateWithoutContentFormationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CommentaireFormationUpsertWithWhereUniqueWithoutFormationInput = {
    where: CommentaireFormationWhereUniqueInput
    update: XOR<CommentaireFormationUpdateWithoutFormationInput, CommentaireFormationUncheckedUpdateWithoutFormationInput>
    create: XOR<CommentaireFormationCreateWithoutFormationInput, CommentaireFormationUncheckedCreateWithoutFormationInput>
  }

  export type CommentaireFormationUpdateWithWhereUniqueWithoutFormationInput = {
    where: CommentaireFormationWhereUniqueInput
    data: XOR<CommentaireFormationUpdateWithoutFormationInput, CommentaireFormationUncheckedUpdateWithoutFormationInput>
  }

  export type CommentaireFormationUpdateManyWithWhereWithoutFormationInput = {
    where: CommentaireFormationScalarWhereInput
    data: XOR<CommentaireFormationUpdateManyMutationInput, CommentaireFormationUncheckedUpdateManyWithoutFormationInput>
  }

  export type CommentaireFormationScalarWhereInput = {
    AND?: CommentaireFormationScalarWhereInput | CommentaireFormationScalarWhereInput[]
    OR?: CommentaireFormationScalarWhereInput[]
    NOT?: CommentaireFormationScalarWhereInput | CommentaireFormationScalarWhereInput[]
    id?: IntFilter<"CommentaireFormation"> | number
    contenu?: StringFilter<"CommentaireFormation"> | string
    auteur?: StringFilter<"CommentaireFormation"> | string
    date?: DateTimeFilter<"CommentaireFormation"> | Date | string
    formationId?: IntFilter<"CommentaireFormation"> | number
  }

  export type ContentFormationCreateWithoutCommentairesInput = {
    titre: string
    description: string
    path: string
    themeFormation: ThemeFormationCreateNestedOneWithoutContentFormationsInput
  }

  export type ContentFormationUncheckedCreateWithoutCommentairesInput = {
    id?: number
    titre: string
    description: string
    path: string
    themeFormationId: number
  }

  export type ContentFormationCreateOrConnectWithoutCommentairesInput = {
    where: ContentFormationWhereUniqueInput
    create: XOR<ContentFormationCreateWithoutCommentairesInput, ContentFormationUncheckedCreateWithoutCommentairesInput>
  }

  export type ContentFormationUpsertWithoutCommentairesInput = {
    update: XOR<ContentFormationUpdateWithoutCommentairesInput, ContentFormationUncheckedUpdateWithoutCommentairesInput>
    create: XOR<ContentFormationCreateWithoutCommentairesInput, ContentFormationUncheckedCreateWithoutCommentairesInput>
    where?: ContentFormationWhereInput
  }

  export type ContentFormationUpdateToOneWithWhereWithoutCommentairesInput = {
    where?: ContentFormationWhereInput
    data: XOR<ContentFormationUpdateWithoutCommentairesInput, ContentFormationUncheckedUpdateWithoutCommentairesInput>
  }

  export type ContentFormationUpdateWithoutCommentairesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    themeFormation?: ThemeFormationUpdateOneRequiredWithoutContentFormationsNestedInput
  }

  export type ContentFormationUncheckedUpdateWithoutCommentairesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    themeFormationId?: IntFieldUpdateOperationsInput | number
  }

  export type ContentFormationUpdateWithoutThemeFormationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    commentaires?: CommentaireFormationUpdateManyWithoutFormationNestedInput
  }

  export type ContentFormationUncheckedUpdateWithoutThemeFormationInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    commentaires?: CommentaireFormationUncheckedUpdateManyWithoutFormationNestedInput
  }

  export type ContentFormationUncheckedUpdateManyWithoutThemeFormationInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type CommentaireFormationUpdateWithoutFormationInput = {
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentaireFormationUncheckedUpdateWithoutFormationInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentaireFormationUncheckedUpdateManyWithoutFormationInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
    auteur?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ThemeFormationCountOutputTypeDefaultArgs instead
     */
    export type ThemeFormationCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ThemeFormationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentFormationCountOutputTypeDefaultArgs instead
     */
    export type ContentFormationCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ContentFormationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegistrationDefaultArgs instead
     */
    export type RegistrationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RegistrationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewsletterDefaultArgs instead
     */
    export type NewsletterArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NewsletterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlogDefaultArgs instead
     */
    export type BlogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = BlogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjetDefaultArgs instead
     */
    export type ProjetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProjetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OffreDefaultArgs instead
     */
    export type OffreArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = OffreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConferenceDefaultArgs instead
     */
    export type ConferenceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ConferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThemeFormationDefaultArgs instead
     */
    export type ThemeFormationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ThemeFormationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentFormationDefaultArgs instead
     */
    export type ContentFormationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ContentFormationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentaireFormationDefaultArgs instead
     */
    export type CommentaireFormationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CommentaireFormationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}